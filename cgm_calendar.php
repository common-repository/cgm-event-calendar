<?php
/*
Plugin Name: CGM Events Calendar
Plugin URI: http://www.creativegraymatter.com/blog/wordpress-events-calendar
Description: An Events/Class Calendar with weekly and monthly views
Version: 0.7.6
Author: Ryan Farrell
Author URI: http://www.creativegraymatter.com

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant and author attributions, this restriction, and the
following disclaimer, must be included in all copies of the Software, in
whole or in part, and all derivative works of the Software, unless such
copies or derivative works are solely in the form of machine-executable 
object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

if (!class_exists("CGMEventsCalendar")) {
	class CGMEventsCalendar {
		var $adminOptionsName = "CGMEventsCalendarAdminOptions";
		
		var $admin_options;
		
		var $display = '';
		var $start_date = '';
		var $end_date = '';
		
		var $year = '';
		var $week = '';
		var $month = '';
		var $day = '';
		
		var $temp_id = '';
		var $temp_start = '';
		var $temp_end = '';
		var $temp_title = '';
		
		function CGMEventsCalendar() { //constructor
			$this->admin_options = $this->get_admin_options();
		}
		
		function init() {
			$this->admin_options = $this->get_admin_options();
		}
		
		//Returns an array of admin options
		function get_admin_options() {
			$cgmAdminOptions = array(
				'cgm_ec_view_default' => 'month',
				'cgm_ec_start_time' => '0',
				'cgm_ec_end_time' => '23',
				'cgm_ec_highlight_category' => '',
				'calendar_page' => 'calendar',
				'calendar_title' => 'Classes and Events',
				'display_category_sorter' => '1',
				'display_view_toggle' => '1',
				'display_print_toggle' => '1',
				'list_format' => '<li>[link]<span class="upcoming_title">[title]</span><span class="upcoming_date">[date=m/d g:i a]</span>[/link]</li>',
				'cgm_events_calendar_db_version' => '1.0');
			$cgmOptions = get_option($this->adminOptionsName);
			if (!empty($cgmOptions)) {
				foreach ($cgmOptions as $key => $option)
					$cgmAdminOptions[$key] = $option;
			}
			update_option($this->adminOptionsName, $cgmAdminOptions);
			if (function_exists("date_default_timezone_set")) date_default_timezone_set(get_option('timezone_string'));
			$this->year = date('Y');
			$this->week = date('W');
			$this->month = date('n');
			$this->day = date('j');
			return $cgmAdminOptions;
		}
		
		//Activate the Plugin
		function activate() {
			global $wpdb;
			$wpdb->show_errors();
			$table_name = $wpdb->prefix . "cgm_cal_entries";
			if($wpdb->get_var("SHOW TABLES LIKE '".$table_name."'") != $table_name) {

				$sql = "CREATE TABLE ".$table_name." (
						  entry_id int(11) NOT NULL auto_increment,
						  start_date_time bigint(20) NOT NULL default '0',
						  end_date_time bigint(20) NOT NULL default '0',
						  does_repeat tinyint(1) NOT NULL default '0',
						  repeat_interval varchar(255) NOT NULL,
						  repeat_days varchar(7) NOT NULL default '0000000',
						  expiration_date_time bigint(20) NOT NULL default '0',
						  title varchar(255) NOT NULL,
						  description text NOT NULL,
						  location text NOT NULL,
						  instructor varchar(255) NOT NULL,
						  level varchar(255) NOT NULL,
						  PRIMARY KEY  (entry_id),
						  KEY start_date_time (start_date_time,end_date_time,does_repeat,expiration_date_time)
						) ENGINE=MyISAM DEFAULT CHARSET=utf8;";

				
				$wpdb->query($sql);
			}

			$table_name = $wpdb->prefix . "cgm_cal_entry_excludes";
			if($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {

				$sql = "CREATE TABLE ".$table_name." (
						  entry_id int(11) NOT NULL default '0',
						  exclude_date bigint(20) NOT NULL default '0',
						  every_year tinyint(1) NOT NULL default '0',
						  PRIMARY KEY  (entry_id,exclude_date)
						) ENGINE=MyISAM DEFAULT CHARSET=utf8;";
				
				$wpdb->query($sql);				
			}
	
			$table_name = $wpdb->prefix . "cgm_cal_entry_includes";
			if($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {

				$sql = "CREATE TABLE ".$table_name." (
						  entry_id int(11) NOT NULL default '0',
						  include_date bigint(20) NOT NULL default '0',
						  every_year tinyint(1) NOT NULL default '0',
						  PRIMARY KEY  (entry_id,include_date)
						) ENGINE=MyISAM DEFAULT CHARSET=utf8;";
				
				$wpdb->query($sql);				
			}
	
			$table_name = $wpdb->prefix . "cgm_cal_entry_tags";
			if($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {

				$sql = "CREATE TABLE ".$table_name." (
						  entry_id int(11) NOT NULL default '0',
						  tag_id int(11) NOT NULL default '0',
						  PRIMARY KEY  (entry_id,tag_id)
						) ENGINE=MyISAM DEFAULT CHARSET=utf8;";
				
				$wpdb->query($sql);				
			}

			$table_name = $wpdb->prefix . "cgm_cal_tags";
			if($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {

				$sql = "CREATE TABLE ".$table_name." (
						  tag_id int(11) NOT NULL auto_increment,
						  tag_name varchar(255) NOT NULL,
						  tag_color varchar(6) NOT NULL,
						  PRIMARY KEY  (tag_id),
						  KEY client_id (tag_id,tag_name)
						) ENGINE=MyISAM DEFAULT CHARSET=utf8;";
				$wpdb->query($sql);
			}

			$this->init();

		}
		
		function admin_header() {
			// conditions here
			wp_enqueue_script( 'common' );
			wp_enqueue_script( 'jquery-color' );
			wp_print_scripts('editor');
			if (function_exists('add_thickbox')) add_thickbox();
			wp_print_scripts('media-upload');
			if (function_exists('wp_tiny_mce')) wp_tiny_mce();
			wp_admin_css();
			wp_enqueue_script('utils');
			do_action("admin_print_styles-post-php");
			do_action('admin_print_styles');
		}
		
		function admin_js() {
			wp_enqueue_script('jquery');
			wp_enqueue_script('utils');
		    wp_enqueue_script('editor');
			wp_enqueue_script('thickbox');
			wp_enqueue_script('media-upload');
			wp_enqueue_script('jquery-ui-core');
		    wp_enqueue_script('datepicker', plugins_url('js/ui.datepicker.js', __FILE__));
			wp_enqueue_script('cgm_events_calendar', plugins_url('js/cgm_events_calendar_admin_js.js', __FILE__));
			wp_enqueue_script('jquery_selectboxes', plugins_url('js/jquery.selectboxes.js', __FILE__));
			wp_enqueue_script('farbtastic', plugins_url('js/farbtastic/farbtastic.js', __FILE__));
		}
		
		function admin_css() {
			wp_enqueue_style('thickbox');
			wp_enqueue_style('farbtastic_css', plugins_url('js/farbtastic/farbtastic.css', __FILE__));
			wp_enqueue_style('cgm_event_calendar', plugins_url('css/cgm_event_calendar.css', __FILE__));
			wp_enqueue_style('smoothness', plugins_url('css/smoothness/jquery.ui.css', __FILE__));
		}
		
		function add_header_code() {
			//echo TEMPLATEPATH.'/css/calendar.css';
			if(file_exists(TEMPLATEPATH.'/calendar.css')) {
				wp_enqueue_style('cgm_calendar_css', get_bloginfo('template_url').'/calendar.css');
			} else {
				wp_enqueue_style('cgm_calendar_css', plugins_url('css/calendar.css', __FILE__));
			}
			wp_enqueue_script('jquery');
			wp_enqueue_script('cgm_events_calendar', plugins_url('js/cgm_events_calendar_cal_js.js', __FILE__));
		}
		
		function clean_input($data) {
			$return = array();
			foreach ($data as $key => $value) {
				if (is_array($value)) {
					foreach ($value as $key2 => $value2) {
						$value2 = stripslashes_deep($value2);
						$return[$key][$key2] = $value2;
					}
				} else {
					$value = stripslashes_deep($value);
					$return[$key] = $value;
				}
			}
			return $return;
		}

		// RETURNS UTC TIME
		function dbtime($hour = '', $minute = '', $second = '', $month = '', $day = '', $year = '') {
			if ($hour === '') $hour = date('G');
			if ($minute === '') $minute = date('i');
			if ($second === '') $second = date('s');
			if ($month === '') $month = date('n');
			if ($day === '') $day = date('j');
			if ($year === '') $year = date('Y');
	
			$tm = mktime($hour, $minute, $second, $month, $day, $year);
			$utc = gmdate('U', $tm);
			return $utc;
		}

		// GET THE CURRENT PAGE FOR LINKAGE
		function current_page() {
			$pageURL = 'http';
			if ($_SERVER["HTTPS"] == "on") {
				$pageURL .= "s";
			}
			$pageURL .= "://";
			if ($_SERVER["SERVER_PORT"] != "80") {
				$pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
			} else {
				$pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
			}
			
			$parts = explode('?', $pageURL);
			$pageURL = $parts[0];
			$get = '';
			
			$strip_array = array('tagid', 'date', 'display', 'view', 'entry');
			foreach($_GET as $key => $value) {
				if (!in_array($key, $strip_array)) {
					$get .= $key.'='.$value.'&';
				}
			}

			return $pageURL.'?'.$get;
		}

		function intercept_page_template() {
			global $wp;
			global $wp_query;
			
			//if (strtolower($wp->request) == strtolower($this->admin_options['calendar_page']) || $wp->query_vars['page_id'] == $this->admin_options['calendar_page']) {
				if (isset($_GET['view']) && $_GET['view'] == 'print') {
					
					if(file_exists(TEMPLATEPATH.'/print_view.php')) {
						include(TEMPLATEPATH.'/print_view.php');
					} else {
						include(WP_PLUGIN_DIR.'/cgm-event-calendar/print_view.php');
					}
					exit;
				}
			//}
		}
		
		function intercept_page_call($posts) {
			global $wp;
			global $wp_query;
				
			if (strtolower($wp->request) == strtolower($this->admin_options['calendar_page']) || $wp->query_vars['page_id'] == $this->admin_options['calendar_page']){
				//Add the fake post
				$posts=NULL;
				$posts[]=$this->createPost();
		
				/**
				 * Trick wp_query into thinking this is a page (necessary for wp_title() at least)
				 * Not sure if it's cheating or not to modify global variables in a filter 
				 * but it appears to work and the codex doesn't directly say not to.
				 */
				$wp_query->is_page = true;
				//Not sure if this one is necessary but might as well set it like a true page
				$wp_query->is_singular = true;
				$wp_query->is_home = false;
				$wp_query->is_archive = false;
				$wp_query->is_category = false;
				//Longer permalink structures may not match the fake post slug and cause a 404 error so we catch the error here
				unset($wp_query->query["error"]);
				$wp_query->query_vars["error"]="";
				$wp_query->is_404=false;
				remove_all_actions( 'the_content' );
			}
			
			return $posts;
		}
		
		/**
		 * Called by the 'detectPost' action
		 */
		function createPost() {
	
			/**
			 * What we are going to do here, is create a fake post.  A post
			 * that doesn't actually exist. We're gonna fill it up with
			 * whatever values you want.  The content of the post will be
			 * the output from your plugin.
			 */		 
		
			/**
			 * Create a fake post.
			 */
			$post = new stdClass;
			
			/**
			 * The safe name for the post.  This is the post slug.
			 */
			$post->post_name = $this->admin_options['calendar_page'];
		
			/**
			 * Not sure if this is even important.  But gonna fill it up anyway.
			 */
			$post->guid = get_bloginfo('wpurl') . '/' . $this->admin_options['calendar_page'];
		
		
			/**
			 * The title of the page.
			 */
			$post->post_title = $this->admin_options['calendar_title'];
		
			/**
			 * This is the content of the post.  This is where the output of
			 * your plugin should go.  Just store the output from all your
			 * plugin function calls, and put the output into this var.
			 */
			$post->post_content = $this->set_up_calendar();
		
			/**
			 * Fake post ID to prevent WP from trying to show comments for
			 * a post that doesn't really exist.
			 */
			$post->ID = -1;
		
			/**
			 * Static means a page, not a post.
			 */
			$post->post_status = 'static';
		
			/**
			 * Turning off comments for the post.
			 */
			$post->comment_status = 'closed';
		
			/**
			 * Let people ping the post?  Probably doesn't matter since
			 * comments are turned off, so not sure if WP would even
			 * show the pings.
			 */
			$post->ping_status = $this->ping_status;
		
			$post->comment_count = 0;
		
			/**
			 * You can pretty much fill these up with anything you want.  The
			 * current date is fine.  It's a fake post right?  Maybe the date
			 * the plugin was activated?
			 */
			$post->post_date = current_time('mysql');
			$post->post_date_gmt = current_time('mysql', 1);

			return($post);		
		}

		function parseArrayToObject($array) {
		   $object = new stdClass();
		   if (is_array($array) && count($array) > 0) {
		      foreach ($array as $name=>$value) {
		         $name = strtolower(trim($name));
		         if (!empty($name)) {
		            $object->$name = $value;
		         }
		      }
		   }
		   return $object;
		}
		
		//Prints out the admin settings page
		function print_settings_page() {
			global $wpdb;
			$cgmOptions = $this->get_admin_options();
			if (isset($_POST['update_cgm_calendar_settings'])) {
				$clean = $this->clean_input($_POST);
				if (isset($clean['cgm_ec_view_default'])) {
					$cgmOptions['cgm_ec_view_default'] = $clean['cgm_ec_view_default'];
				}
				if (isset($clean['cgm_ec_start_time'])) {
					$cgmOptions['cgm_ec_start_time'] = $clean['cgm_ec_start_time'];
				}
				if (isset($clean['cgm_ec_end_time'])) {
					$cgmOptions['cgm_ec_end_time'] = $clean['cgm_ec_end_time'];
				}
				if (isset($clean['cgm_ec_highlight_category'])) {
					$cgmOptions['cgm_ec_highlight_category'] = $clean['cgm_ec_highlight_category'];
				}
				if (isset($clean['calendar_page'])) {
					$cgmOptions['calendar_page'] = $clean['calendar_page'];
				}
				if (isset($clean['calendar_title'])) {
					$cgmOptions['calendar_title'] = $clean['calendar_title'];
				}
				if (isset($clean['list_format'])) {
					$cgmOptions['list_format'] = stripslashes_deep($clean['list_format']);
				}
				if (isset($clean['calendar_url'])) {
					$cgmOptions['calendar_url'] = $clean['calendar_url'];
				}
				if (isset($clean['display_category_sorter'])) {
					$cgmOptions['display_category_sorter'] = 1;
				} else {
					$cgmOptions['display_category_sorter'] = 0;
				}
				if (isset($clean['display_view_toggle'])) {
					$cgmOptions['display_view_toggle'] = 1;
				} else {
					$cgmOptions['display_view_toggle'] = 0;
				}
				if (isset($clean['display_print_toggle'])) {
					$cgmOptions['display_print_toggle'] = 1;
				} else {
					$cgmOptions['display_print_toggle'] = 0;
				}
				
				update_option($this->adminOptionsName, $cgmOptions);
				?>
				<div class="updated">
					<p><strong><?php _e("Settings Updated.", "cgm_calendar");?></strong></p>
				</div>
			<?php
			}
			?>
			<div class="wrap">		
				<h2>Donate</h2>
				<p>If you find this plugin helpful, please donate below so I can continue developing this and other plugins.</p>
				<p><form action="https://www.paypal.com/cgi-bin/webscr" method="post">
					<input type="hidden" name="cmd" value="_s-xclick">
					<input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----MIIHRwYJKoZIhvcNAQcEoIIHODCCBzQCAQExggEwMIIBLAIBADCBlDCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20CAQAwDQYJKoZIhvcNAQEBBQAEgYBb8PGQe+qQL6wjKjJ3pYlyJSWJv+vKzHrPhQa/c1P0oB+Aiiia1hwR3Eu62x1lhLojAu6lxJPjZ0+3LzB1ieNPNP8wCTO1lhxHk9+0nZBsVnmdI+Nyo1YAWzPnMTgKP4DWyKzd+BZBMIfUerDNcIh/nWSIpBlI7Bm7ZaBOTKtBtzELMAkGBSsOAwIaBQAwgcQGCSqGSIb3DQEHATAUBggqhkiG9w0DBwQIE5L4igBcwj+AgaDyTcSRS4+TxvfgE6TXDUj8SFLVvgqjmHkusBBttCBYFuHHZrp0gXKZ5kBIJBqh9VTeGdVtQLtkXFQqIx+6M3cbUvMe6fAdGrIXb56nAiWZhOzUzBtz/sX4Gqzr8s1GYpZVbfLSNDEvekB9mSSvx0aHDRaEUgWCXUUoX3NGwXS7AOP2wEKxdYayVeA589U+GhRdSLbiNbDqEnjJb/u6vx+7oIIDhzCCA4MwggLsoAMCAQICAQAwDQYJKoZIhvcNAQEFBQAwgY4xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLUGF5UGFsIEluYy4xEzARBgNVBAsUCmxpdmVfY2VydHMxETAPBgNVBAMUCGxpdmVfYXBpMRwwGgYJKoZIhvcNAQkBFg1yZUBwYXlwYWwuY29tMB4XDTA0MDIxMzEwMTMxNVoXDTM1MDIxMzEwMTMxNVowgY4xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLUGF5UGFsIEluYy4xEzARBgNVBAsUCmxpdmVfY2VydHMxETAPBgNVBAMUCGxpdmVfYXBpMRwwGgYJKoZIhvcNAQkBFg1yZUBwYXlwYWwuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBR07d/ETMS1ycjtkpkvjXZe9k+6CieLuLsPumsJ7QC1odNz3sJiCbs2wC0nLE0uLGaEtXynIgRqIddYCHx88pb5HTXv4SZeuv0Rqq4+axW9PLAAATU8w04qqjaSXgbGLP3NmohqM6bV9kZZwZLR/klDaQGo1u9uDb9lr4Yn+rBQIDAQABo4HuMIHrMB0GA1UdDgQWBBSWn3y7xm8XvVk/UtcKG+wQ1mSUazCBuwYDVR0jBIGzMIGwgBSWn3y7xm8XvVk/UtcKG+wQ1mSUa6GBlKSBkTCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUFAAOBgQCBXzpWmoBa5e9fo6ujionW1hUhPkOBakTr3YCDjbYfvJEiv/2P+IobhOGJr85+XHhN0v4gUkEDI8r2/rNk1m0GA8HKddvTjyGw/XqXa+LSTlDYkqI8OwR8GEYj4efEtcRpRYBxV8KxAW93YDWzFGvruKnnLbDAF6VR5w/cCMn5hzGCAZowggGWAgEBMIGUMIGOMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC1BheVBhbCBJbmMuMRMwEQYDVQQLFApsaXZlX2NlcnRzMREwDwYDVQQDFAhsaXZlX2FwaTEcMBoGCSqGSIb3DQEJARYNcmVAcGF5cGFsLmNvbQIBADAJBgUrDgMCGgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTAwNzIxMTQzODMwWjAjBgkqhkiG9w0BCQQxFgQUaOLR/brnfIlFXqye2JMXmu6QYdkwDQYJKoZIhvcNAQEBBQAEgYAj0Ruqns+VfpU7QTC9mh0cUOV5jYQVYoiS7H6CWO0aOyXxCsF5kCzC4b8QA6PtCCOXH3A7pXtOmp5awHLsgg9d1rWI1fOTqoqVp26mkEhqF6AYcRul/pnZl11rWdxKtwAu1UQgAM3GKyFTCsCLMKn2P4aSzWusNHUagoue8oz8dQ==-----END PKCS7-----
					">
					<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
					<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
					</form>
				</p>
		
				<form action="<?php echo $_SERVER["REQUEST_URI"]; ?>" method="post">
					<h2>CGM <?php _e('Events Calendar Settings', 'cgm_event_calendar'); ?></h2>

					<table class="form-table">
						<tr valign="top">
							<th scope="row"><label for="calendar_page"><?php _e('Page Name', 'cgm_event_calendar'); ?></label></th>
							<td><input type="text" value="<?php echo $cgmOptions['calendar_page']; ?>" id="calendar_page" name="calendar_page" class="regular-text" /></td>
						</tr>
					
						<tr valign="top">
							<th scope="row"><label for="calendar_title"><?php _e('Page Title', 'cgm_event_calendar'); ?></label></th>
							<td><input type="text" value="<?php echo $cgmOptions['calendar_title']; ?>" id="calendar_title" name="calendar_title" class="regular-text" /></td>
						</tr>
						
						<tr valign="top">
							<th scope="row"><label for="calendar_url"><?php _e('Calendar URL', 'cgm_event_calendar'); ?></label></th>
							<td><input type="text" value="<?php echo $cgmOptions['calendar_url']; ?>" id="calendar_url" name="calendar_url" class="regular-text" /><br />
								<span class="description"><?php _e('The default would be http://www.yoursiteurl.com/calendar but make sure to place the correct path here or the upcoming events list will not work properly.', 'cgm_event_calendar'); ?></span></td>
						</tr>
					
						<tr valign="top">
							<th scope="row"><label for="list_format"><?php _e('List Format', 'cgm_event_calendar'); ?></label></th>
							<td><textarea id="list_format" name="list_format" cols="50" rows="10" class="large-text code"><?php echo stripslashes($cgmOptions['list_format']); ?></textarea>
							<span class="description"><?php echo __('You can use a few shortcodes here', 'cgm_event_calendar').':<br />
								[title] -> '.__('displays the event title', 'cgm_event_calendar').'<br />
								[link] [/link] -> '.__('adds the link to the individual event', 'cgm_event_calendar').'<br />
								[date=format] -> '.__('add the start date of the event in the format you specify.', 'cgm_event_calendar').'  <a href="http://www.php.net/manual/en/function.date.php" target="_blank">'.__('Valid Formats', 'cgm_event_calendar').'</a><br />
								[enddate=format] -> '.__('add the end date in the format you specify', 'cgm_event_calendar').'<br /><br />
								'.__('Note: if you use list items here, you will have to wrap the function call in ul or ol tags.', 'cgm_event_calendar'); ?></span></td>
						</tr>

						<tr valign="top">
							<th scope="row"><label for="cgm_ec_view_default"><?php _e('Default View', 'cgm_event_calendar'); ?></label></th>
							<td><select id="cgm_ec_view_default" name="cgm_ec_view_default">
								<option value="week" <?php if ($cgmOptions['cgm_ec_view_default'] == 'week') echo 'selected="selected"'; ?>>Weekly</option>
								<option value="month" <?php if ($cgmOptions['cgm_ec_view_default'] == 'month') echo 'selected="selected"'; ?>>Monthly</option>
							</select></td>
						</tr>
						<tr valign="top">
							<th scope="row"><label for="cgm_ec_start_time"><?php _e('Start Time', 'cgm_event_calendar'); ?></label></th>
							<td><select id="cgm_ec_start_time" name="cgm_ec_start_time">
								<?php
								for ($i=0; $i<=23; $i++) {
									echo '<option';
									if ($cgmOptions['cgm_ec_start_time'] == $i) echo ' selected="selected"';
									echo '>'.$i.'</option>';
								}
								?>
							</select></td>
						</tr>
						<tr valign="top">
							<th scope="row"><label for="cgm_ec_end_time"><?php _e('End Time', 'cgm_event_calendar'); ?></label></th>
							<td><select id="cgm_ec_end_time" name="cgm_ec_end_time">
								<?php
								for ($i=1; $i<=23; $i++) {
									echo '<option';
									if ($cgmOptions['cgm_ec_end_time'] == $i) echo ' selected="selected"';
									echo '>'.$i.'</option>';
								}
								?>
							</select></td>
						</tr>
		
						<tr valign="top">
							<th scope="row"><label for="display_category_sorter"><?php _e('Display Category Sorter', 'cgm_event_calendar'); ?></label></th>
							<td><input type="checkbox" name="display_category_sorter" id="display_category_sorter" <?php if ($cgmOptions['display_category_sorter'] == 1) echo 'checked="checked"'; ?> /></td>
						</tr>
		
						<tr valign="top">
							<th scope="row"><label for="display_view_toggle"><?php _e('Display Week/Month View Toggle', 'cgm_event_calendar'); ?></label></th>
							<td><input type="checkbox" name="display_view_toggle" id="display_view_toggle" <?php if ($cgmOptions['display_view_toggle'] == 1) echo 'checked="checked"'; ?> /></td>
						</tr>
						<tr valign="top">
							<th scope="row"><label for="display_print_toggle"><?php _e('Display Print View Toggle', 'cgm_event_calendar'); ?></label></th>
							<td><input type="checkbox" name="display_print_toggle" id="display_print_toggle" <?php if ($cgmOptions['display_print_toggle'] == 1) echo 'checked="checked"'; ?> /></td>
						</tr>
						display_print_toggle
						<?php
						/*
						$sql = "Select tag_id, tag_name from ".$wpdb->prefix . "cgm_cal_tags order by tag_name asc";
						$tags = $wpdb->get_results($sql);
						?>
					
						<tr valign="top">
							<th scope="row"><label for="cgm_ec_highlight_category">Highlight Category</label></th>
							<td><select id="cgm_ec_highlight_category" name="cgm_ec_highlight_category">
								<option value="">None</option>
								<?php
								foreach ($tags as $tag) {
									echo '<option value="'.$tag->tag_id.'"';
									if ($cgmOptions['cgm_ec_highlight_category'] == $tag->tag_id) echo ' selected="selected"';
									echo '>'.$tag->tag_name.'</option>';
								}
								?>
							</select></td>
						</tr>
						<?php
						*/
						?>
						</table>
						<p class="submit">
							<input type="submit" name="update_cgm_calendar_settings" class="button-primary"  value="<?php _e('Update Settings', 'cgm_calendar') ?>" />
						</p>
				</form>
				
			</div>
			<?php
		}//End function printAdminPage()
				
		//Display a list of all the entries		
		function display_entries() {
			
			global $wpdb;
			$wpdb->show_errors();
	
			// Delete the entry
			if (isset($_GET['delete_id']) && is_numeric($_GET['delete_id'])) {
				$delete = absint($_GET['delete_id']);
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_entries where entry_id = '".$delete."'");
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_entry_excludes where entry_id = '".$delete."'");
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_entry_includes where entry_id = '".$delete."'");
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_entry_tags where entry_id = '".$delete."'");
			}
				
			$sql = "Select e.entry_id, e.title, e.start_date_time, e.repeat_interval, e.repeat_days from ".$wpdb->prefix . "cgm_cal_entries e order by e.title, e.start_date_time, e.entry_id";
			$entries = $wpdb->get_results($sql);
	
			?>
			<div class="wrap">

				<h2><?php _e('Calendar Entries', 'cgm_event_calendar'); ?></h2>
				<table class="widefat post fixed" cellspacing="0" cellpadding="0">
					<thead>
						<tr>
						<th scope="col" id="title" class="manage-column column-title" style=""><?php _e('Entry', 'cgm_event_calendar'); ?></th>
						<th scope="col" id="tags" class="manage-column column-tags" style=""><?php _e('Tags', 'cgm_event_calendar'); ?></th>
						</tr>
					</thead>
	
					<tfoot>
						<tr>
						<th scope="col"  class="manage-column column-title" style=""><?php _e('Entry', 'cgm_event_calendar'); ?></th>
						<th scope="col"  class="manage-column column-tags" style=""><?php _e('Tags', 'cgm_event_calendar'); ?></th>
						</tr>
					</tfoot>
					<tbody>
		
					<?php
					foreach ($entries as $entry) {
						echo '
						<tr id="post-'.$entry->entry_id.'" class="alternate author-self status-publish iedit" valign="top">
							<td class="post-title column-title"><strong><a class="row-title" href="admin.php?page=cgm_calendar_edit&amp;entry_id='.$entry->entry_id.'" title="Edit &#8220;'.$entry->title.'">'.$entry->title.' - '.date('g:i a', $entry->start_date_time);
							if (isset($entry->repeat_interval) && $entry->repeat_interval == 'days of week') {
								echo ' ';
								if (substr($entry->repeat_days, 1, 1) == '1') echo 'Mon ';
								if (substr($entry->repeat_days, 2, 1) == '1') echo 'Tue ';
								if (substr($entry->repeat_days, 3, 1) == '1') echo 'Wed ';
								if (substr($entry->repeat_days, 4, 1) == '1') echo 'Thu ';
								if (substr($entry->repeat_days, 5, 1) == '1') echo 'Fri ';
								if (substr($entry->repeat_days, 6, 1) == '1') echo 'Sat ';
								if (substr($entry->repeat_days, 0, 1) == '1') echo 'Sun ';
							}
							echo '</a></strong>';
					
							echo '<div class="row-actions"><span class="edit"><a href="admin.php?page=cgm_calendar_edit&amp;entry_id='.$entry->entry_id.'" title="Edit this entry">'.__('Edit', 'cgm_event_calendar').'</a> | </span><span class="delete"><a class="submitdelete" title="Delete this calendar entry" href="admin.php?page=cgm-event-calendar/cgm_calendar.php&amp;delete_id='.$entry->entry_id.'" onClick="if ( confirm(\''.__('Are you sure you wish to delete this entry?', 'cgm_event_calendar').'\') ) { return true;}return false;">'.__('Delete', 'cgm_event_calendar').'</a></span></div>';
						echo '</td>
							<td class="tags column-tags">';
						$tags = $wpdb->get_results("select td.tag_name from ".$wpdb->prefix."cgm_cal_tags td, ".$wpdb->prefix."cgm_cal_entry_tags t where t.entry_id = '".$entry->entry_id."' and t.tag_id = td.tag_id");
						$tag_out = '';
						foreach ($tags as $tag) {
							$tag_out .= $tag->tag_name.', ';
						}
						$tag_out = trim($tag_out, ', ');
						if ($tag_out != '') {
							echo $tag_out;
						} else {
							echo 'none';
						}
						echo '</td>
						</tr>';
					}
					?>
					</tbody>
				</table>
			</div>
			<?php
		}

		// EDIT/ADD/DELETE entries
		function edit_entry() {
			global $wpdb;
			global $current_user;
			$wpdb->show_errors();
			$error_message = '';
			
			
			$entry_id = '';
			$entry = array();
			if (isset($_GET['entry_id']) && is_numeric($_GET['entry_id'])) {
				$entry_id = absint($_GET['entry_id']);
				$entry = $wpdb->get_row("SELECT * FROM ".$wpdb->prefix."cgm_cal_entries WHERE entry_id = '".$entry_id."'");
			}
			
			// -----------------------------------------------
			// ADD OR SAVE THE ENTRY
			// -----------------------------------------------
			if (isset($_POST['action']) && ($_POST['action'] == 'new' || $_POST['action'] == 'update')) {
				$clean = $this->clean_input($_POST);
				
				//$this->pa($clean);
				
				// FILTER IN ANY GET INPUTS
				$repeat_days = '0000000';
				$repeat = 0;

				$error_message = '';
				$time_error = '';
				if ($clean['title'] == '') $error_message .= __('You must enter a title.', 'cgm_event_calendar')."\n";
				
				// CHECK THE START DATE AND SET THE UTC TIME
				if ($clean['start_date_time'] == '') {
					$time_error .= __('You must enter a start date.', 'cgm_event_calendar').'<br />';
				} else {
					$date = explode('/', $clean['start_date_time']);
					if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
						$time_error .= __('It appears you have entered an incorrect start date.  Please check and try again.', 'cgm_event_calendar').'<br />';
					} else {
						if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
							$time_error .= __('It appears you have entered an incorrect start date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
							$time_error .= __('It appears you have entered an incorrect start date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
							$time_error .= __('It appears you have entered an incorrect start date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						}
					}
					if (intval($clean['start_hour']) < 0 || intval($clean['start_hour']) > 12) {
						$time_error .= __('It appears you have entered an incorrect start hour.  Please check and try again.', 'cgm_event_calendar').'<br />';
					}
					if ($clean['start_minutes'] < 0 || $clean['start_minutes'] > 59) {
						$time_error .= __('It appears you have entered an incorrect start minute.  Please check and try again.', 'cgm_event_calendar').'<br />';
					}
				}
				if ($time_error == '') {
					if ($clean['start_meridiem'] == 'PM' && $clean['start_hour'] != 12) {
						$clean['start_hour'] += 12;
					}
					if ($clean['start_meridiem'] == 'AM' && $clean['start_hour'] == 12) {
						$clean['start_hour'] = 0;	
					}
					$clean['start_date_time'] = $this->dbtime($clean['start_hour'],$clean['start_minutes'],0,$date[0], $date[1], $date[2]);
				}
				$error_message .= $time_error;
					
				$time_error = '';
				// CHECK THE END DATE AND SET THE UTC TIME
				if ($clean['end_date_time'] == '') {
					$time_error .= __('You must enter a start date.', 'cgm_event_calendar').'<br />';
				} else {
					$date = explode('/', $clean['end_date_time']);
					if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
						$time_error .= __('It appears you have entered an incorrect end date.  Please check and try again.', 'cgm_event_calendar').'<br />';
					} else {
						if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
							$time_error .= __('It appears you have entered an incorrect end date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
							$time_error .= __('It appears you have entered an incorrect end date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
							$time_error .= __('It appears you have entered an incorrect end date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						}
					}
					if ($clean['end_hour'] < 0 || $clean['end_hour'] > 12) {
						$time_error .= __('It appears you have entered an incorrect end hour.  Please check and try again.', 'cgm_event_calendar').'<br />';
					}
					if ($clean['end_minutes'] < 0 || $clean['end_minutes'] > 59) {
						$time_error .= __('It appears you have entered an incorrect end minute.  Please check and try again.', 'cgm_event_calendar').'<br />';
					}
				}
				if ($time_error == '') {
					if ($clean['end_meridiem'] == 'PM' && $clean['end_hour'] != 12) {
						$clean['end_hour'] += 12;
					}
					if ($clean['end_meridiem'] == 'AM' && $clean['end_hour'] == 12) {
						$clean['end_hour'] = 0;	
					}
					$clean['end_date_time'] = $this->dbtime($clean['end_hour'],$clean['end_minutes'],0,$date[0], $date[1], $date[2]);
				}
				$error_message .= $time_error;
				
				// MAKE SURE THE END DATE IS LATER
				if ($error_message == '') {
					if ($clean['end_date_time'] <= $clean['start_date_time']) {
						$error_message .= __('Your end date must be sometime after your start date.', 'cgm_event_calendar').'<br />';
					}
				}
				
				// CHECK THE EXPIRATION DATE AND SET TO UTC IF NEEDED
				if ($clean['repeat_interval'] != 'none') {
					$repeat = '1';
					if ($clean['expiration_date_time'] == '' || $clean['repeat_forever'] == 'on') {
						$clean['expiration_date_time'] = '0';
					} else {
						
						$date = explode('/', $clean['expiration_date_time']);
						if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
							$error_message .= __('It appears you have entered an incorrect expiration date.  Please check and try again.', 'cgm_event_calendar').'<br />';
						} else {
							if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
								$error_message .= __('It appears you have entered an incorrect expiration date.  Please check and try again.', 'cgm_event_calendar').'<br />';
							} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
								$error_message .= __('It appears you have entered an incorrect expiration date.  Please check and try again.', 'cgm_event_calendar').'<br />';
							} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
								$error_message .= __('It appears you have entered an incorrect expiration date.  Please check and try again.', 'cgm_event_calendar').'<br />';
							}
						}
						
						if ($error_message == '') {
							$clean['expiration_date_time'] = $this->dbtime(23,59,59,$date[0], $date[1], $date[2]);
						}
						
					}
				}
				$repeat_days = '';
				if ($clean['repeat_interval'] == 'these relative days') {
					if ($clean['first'] == '' && $clean['second'] == '' && $clean['third'] == '' && $clean['fourth'] == '' && $clean['fifth'] == '' && $clean['last'] == '') {
						$error_message .= __('You must select at least one relative day for the event to occur', 'cgm_event_calendar');
					} else {
						if ($clean['first'] == 'on') $repeat_days = '1'; else $repeat_days = '0';
						if ($clean['second'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['third'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['fourth'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['fifth'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['last'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
					}
				} else if ($clean['repeat_interval'] == 'days of week') {
					if ($clean['monday'] == '' && $clean['tuesday'] == '' && $clean['wednesday'] == '' && $clean['thursday'] == '' && $clean['friday'] == '' && $clean['saturday'] == '' && $clean['sunday'] == '') {
						$error_message .= __('You must select at least one day of the week for the event to occur', 'cgm_event_calendar');
					} else {
						if ($clean['sunday'] == 'on') $repeat_days = '1'; else $repeat_days = '0';
						if ($clean['monday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['tuesday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['wednesday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['thursday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['friday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
						if ($clean['saturday'] == 'on') $repeat_days .= '1'; else $repeat_days .= '0';
					}
				}
				$clean['repeat_days'] = $repeat_days;
		
				if ($clean['action'] == 'new' && $error_message == '') {

					$table_name = $wpdb->prefix . "cgm_cal_entries";
					
					$data = array(
						'start_date_time' => $clean['start_date_time'],
						'end_date_time' => $clean['end_date_time'],
						'does_repeat' => $repeat,
						'repeat_interval' => $clean['repeat_interval'],
						'repeat_days' => $clean['repeat_days'],
						'expiration_date_time' => $clean['expiration_date_time'],
						'title' => $clean['title'],
						'description' => $clean['description'],
						'location' => $clean['location'],
						'instructor' => $clean['instructor'],
						'level' => ''
						);
					
					$wpdb->insert( $table_name, $data );
					$entry_id =  $wpdb->insert_id;

					$table_name = $wpdb->prefix . "cgm_cal_entry_includes";
					if (count($clean['include_dates_select']) > 0) {
						foreach ($clean['include_dates_select'] as $include_date) {
							if ($include_date != '') {
								$temp = explode(" ", $include_date);
								$repeat_yearly = $temp[1];
								$date = explode('/', $temp[0]);
								if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
									$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
								} else {
									if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									}
								}
								if ($error_message == '') {
									$date = $this->dbtime(0,0,0,$date[0], $date[1], $date[2]);
									$data = array(
										'entry_id' => $entry_id,
										'include_date' => $date,
										'every_year' => $repeat_yearly
										);
									$wpdb->insert( $table_name, $data );
								}
							}
						}
					}

					$table_name = $wpdb->prefix . "cgm_cal_entry_excludes";
					if (count($clean['exclude_dates_select']) > 0) {
						foreach ($clean['exclude_dates_select'] as $exclude_date) {
							if ($exclude_date != '') {
								$temp = explode(" ", $exclude_date);
								$repeat_yearly = $temp[1];
								$date = explode('/', $temp[0]);
								if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
									$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
								} else {
									if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
										$error_message .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									}
								}
								if ($error_message == '') {
									$date = $this->dbtime(0,0,0,$date[0], $date[1], $date[2]);
									$data = array(
										'entry_id' => $entry_id,
										'exclude_date' => $date,
										'every_year' => $repeat_yearly
										);
									$wpdb->insert( $table_name, $data );
								}
							}
						}
					}

					$entry_tags = $wpdb->get_results("select tag_id from ".$wpdb->prefix."cgm_cal_tags order by tag_id");
					$table_name = $wpdb->prefix . "cgm_cal_entry_tags";
					foreach ($entry_tags as $tag) {
						if (isset($clean['tag_'.$tag->tag_id]) && $clean['tag_'.$tag->tag_id] == 'on') {
							$data = array(
								'entry_id' => $entry_id,
								'tag_id' => $tag->tag_id
								);
							$wpdb->insert( $table_name, $data );
						}
					}
					if ($error_message == '') {
						$inserted = true;
					}
					
				// ---------------------------------------
				// UPDATE RECORD
				// ---------------------------------------
				} else if ($clean['action'] == 'update') {

	 				if (!is_numeric($entry_id)) {
 		            	$error_message .= __('Invalid entry ID.', 'cgm_event_calendar').'<br />';
					}
					
					if ($error_message == '') {
						$table_name = $wpdb->prefix . "cgm_cal_entries";
					
						$data = array(
							'start_date_time' => $clean['start_date_time'],
							'end_date_time' => $clean['end_date_time'],
							'does_repeat' => $repeat,
							'repeat_interval' => $clean['repeat_interval'],
							'repeat_days' => $repeat_days,
							'expiration_date_time' => $clean['expiration_date_time'],
							'title' => $clean['title'],
							'description' => $clean['description'],
							'location' => $clean['location'],
							'instructor' => $clean['instructor'],
							'level' => ''
							);
						$where = array('entry_id' => $entry_id);
						$wpdb->update( $table_name, $data, $where, '%s', '%d' );
					}
					
					$include_error = '';
					$table_name = $wpdb->prefix . "cgm_cal_entry_includes";
					$wpdb->query("delete from ".$table_name." where entry_id = '".$entry_id."'");
					if (count($clean['include_dates_select']) > 0) {
						foreach ($clean['include_dates_select'] as $include_date) {
							if ($include_date != '') {
								$temp = explode(" ", $include_date);
								$repeat_yearly = $temp[1];
								$date = explode('/', $temp[0]);
								if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
									$include_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
								} else {
									if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
										$include_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
										$include_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
										$include_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									}
								}
								if ($include_error == '') {
									$date = $this->dbtime(0,0,0,$date[0], $date[1], $date[2]);
									$data = array(
										'entry_id' => $entry_id,
										'include_date' => $date,
										'every_year' => $repeat_yearly
										);
									
									$wpdb->insert( $table_name, $data );
								} else {
									$error_message .= $include_error;
								}
							}
						}
					}
			
					$exclude_error = '';
					$table_name = $wpdb->prefix . "cgm_cal_entry_excludes";
					$wpdb->query("delete from ".$table_name." where entry_id = '".$entry_id."'");
					if (count($clean['exclude_dates_select']) > 0) {
						foreach ($clean['exclude_dates_select'] as $exclude_date) {
							if ($exclude_date != '') {
								$temp = explode(" ", $exclude_date);
								$repeat_yearly = $temp[1];
								$date = explode('/', $temp[0]);
								if (count($date) != 3 || preg_match('[^0-9]', $date[0]) || preg_match('[^0-9]', $date[1]) || preg_match('[^0-9]', $date[2])) {
									$exclude_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
								} else {
									if (strlen($date[0]) < 1 || strlen($date[0]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 12) {
										$exclude_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[1]) < 1 || strlen($date[1]) > 2 || intval($date[0]) < 1 || intval($date[0]) > 31) {
										$exclude_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									} else if (strlen($date[2]) != 4 || intval($date[2]) < date('Y')) {
										$exclude_error .= __('It appears you have entered an incorrect include date.  Please check and try again.', 'cgm_event_calendar').'<br />';
									}
								}
								if ($exclude_error == '') {
									$date = $this->dbtime(0,0,0,$date[0], $date[1], $date[2]);
									$data = array(
										'entry_id' => $entry_id,
										'exclude_date' => $date,
										'every_year' => $repeat_yearly
										);
									$wpdb->insert( $table_name, $data );
								} else {
									$error_message .= $exclude_error;
								}
							}
						}
					}
			
					$entry_tags = $wpdb->get_results("select tag_id from ".$wpdb->prefix."cgm_cal_tags order by tag_id");
					$table_name = $wpdb->prefix . "cgm_cal_entry_tags";
					$wpdb->query("delete from ".$table_name." where entry_id = '".$entry_id."'");
					foreach ($entry_tags as $tag) {
						if (isset($clean['tag_'.$tag->tag_id]) && $clean['tag_'.$tag->tag_id] == 'on') {
							$data = array(
								'entry_id' => $entry_id,
								'tag_id' => $tag->tag_id
								);
							$wpdb->insert( $table_name, $data );
						}
					}
					if ($error_message == '') {
						$updated = true;
					}
					
				}
			
			
				
				//----------------------------------------------------------------
				
				$entry = $this->parseArrayToObject($clean);
			}
		
			?>
			<div class="wrap" id="events_calendar_admin">
				
				<?php
				if (isset($error_message) && $error_message != '') {
					echo '<div id="message" class="error"><p>'.$error_message.'</p></div>';
				} else if (isset($updated) && $updated) {
					echo '<div id="message" class="updated"><p>'.__('Entry Updated', 'cgm_event_calendar').'</p></div>';
				} else if (isset($inserted) && $inserted) {
					echo '<div id="message" class="updated"><p>'.__('Entry Inserted', 'cgm_event_calendar').'</p></div>';
				}
				?>
				<div id="icon-edit" class="icon32"><br /></div>
				<?php
				if (is_numeric($entry_id)) {
					echo '<h2>'.__('Edit Calendar Entry', 'cgm_event_calendar').'</h2>';
				} else {
					echo '<h2>'.__('New Calendar Entry', 'cgm_event_calendar').'</h2>';
				}
				?>
				
				<script type="text/javascript">
				function select_all_dates() {
					selectBox = document.getElementById('include_dates_select');
					for (var i = 0; i < selectBox.options.length; i++) {
						selectBox.options[i].selected = true;
					}
					selectBox = document.getElementById('exclude_dates_select');
					for (var i = 0; i < selectBox.options.length; i++) {
						selectBox.options[i].selected = true;
					}
					return true;
				}
				</script>
		

				<form method="post" onsubmit="return select_all_dates();" action="admin.php?page=cgm_calendar_edit&amp;entry_id=<?php echo $entry_id; ?>" >
					<div id="poststuff" class="metabox-holder has-right-sidebar">
						<div id="side-info-column" class="inner-sidebar">


							<div id='side-sortables' class='meta-box-sortables'>
								<div id="calendar_include_dates" class="postbox " >
									<h3 class='hndle'><span><?php _e('Include Dates', 'cgm_event_calendar'); ?></span></h3>
									<div class="inside">

										<p><label for="include_every_year"><?php _e('Include Every Year', 'cgm_event_calendar'); ?></label><input type="checkbox" name="include_every_year" id="include_every_year" /></p>
										<p><input type="text" name="include_dates" id="include_dates" class="date_input" value="" /><button onclick="return add_include_date();">add</button></p>
										<p>
											<select multiple name="include_dates_select[]" id="include_dates_select" size="3">
												<?php
												if (is_numeric($entry_id)) {
													$include_dates = $wpdb->get_results("select * from ".$wpdb->prefix."cgm_cal_entry_includes where entry_id = '".$entry_id."'");
													foreach($include_dates as $include_date) {
														echo '<option>'.date('m/d/Y', $include_date->include_date).' '.$include_date->every_year.'</option>';
													}
													if (count($include_dates) == 0) {
														echo '<option></option>';
													}
												} else if (isset($entry->include_dates_select)) {
													if (count($entry->include_dates_select) == 0) {
														echo '<option></option>';
													} else {
														foreach($entry->include_dates_select as $include_date) {
															echo '<option>'.$include_date.'</option>';
														}
													}
												} else {
													echo '<option></option>';
												}
												?>
											</select>
										</p>
	
										<p><button onclick="return remove_include_date();"><?php _e('remove selected', 'cgm_event_calendar'); ?></button></p>
									</div>
								</div>					
		
								<div id="calendar_exclude_dates" class="postbox " >
									<h3 class='hndle'><span><?php _e('Exclude Dates', 'cgm_event_calendar'); ?></span></h3>
									<div class="inside">

										<p><label for="exclude_every_year"><?php _e('Exclude Every Year', 'cgm_event_calendar'); ?></label><input type="checkbox" name="exclude_every_year" id="exclude_every_year" /></p>
										<p><input type="text" name="exclude_dates" id="exclude_dates" class="date_input" value="" /><button onclick="return add_exclude_date();">add</button></p>
										<p>
											<select multiple name="exclude_dates_select[]" id="exclude_dates_select" size="3">
												<?php
												if (is_numeric($entry_id)) {
													$exclude_dates = $wpdb->get_results("select * from ".$wpdb->prefix."cgm_cal_entry_excludes where entry_id = '".$entry_id."'");
													foreach($exclude_dates as $exclude_date) {
														echo '<option>'.date('m/d/Y', $exclude_date->exclude_date).' '.$exclude_date->every_year.'</option>';
													}
													if (count($include_dates) == 0) {
														echo '<option></option>';
													}											
												} else if (isset($entry->exclude_dates_select)) {
													if (count($entry->exclude_dates_select) == 0) {
														echo '<option></option>';
													} else {
														foreach($entry->exclude_dates_select as $exclude_date) {
															echo '<option>'.$exclude_date.'</option>';
														}
													}
												} else {
													echo '<option></option>';
												}
												?>
											</select>
										</p>
								
										<p><button onclick="return remove_exclude_date();"><?php _e('remove selected', 'cgm_event_calendar'); ?></button></p>
									</div>
								</div>
						
								<div id="calendar_tags" class="postbox " >
									<h3 class='hndle'><span><?php _e('Entry Tags', 'cgm_event_calendar'); ?></span></h3>
									<div class="inside">
											<?php
											$tag_array = array();
											if ($entry != '') {
												$entry_tags = $wpdb->get_results("select tag_id from ".$wpdb->prefix."cgm_cal_entry_tags where entry_id = '".$entry_id."'");
												foreach ($entry_tags as $tag) {
													$tag_array[] = $tag->tag_id;
												}
											}
											$tags = $wpdb->get_results("select tag_id, tag_name, tag_color from ".$wpdb->prefix."cgm_cal_tags order by tag_name");
									
											foreach ($tags as $tag) {
												echo '<p><label for="tag_'.$tag->tag_id.'"><span class="entry_tag" style="background: #'.$tag->tag_color.';"></span>'.$tag->tag_name.'</label>';
												echo '<input type="checkbox" name="tag_'.$tag->tag_id.'" id="tag_'.$tag->tag_id.'"';
												if (in_array($tag->tag_id, $tag_array)) {
													echo ' checked="checked"';
												}
												echo ' /></p>';
											}
											?>
												
									</div>
								</div>		
							
							</div>
						</div>
		
						<div id="post-body">
							<div id="post-body-content">
				
								<table class="form-table">
									<tr valign="top">
										<th scope="row"><?php _e('Title', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="title" id="title" value="<?php echo htmlentities($entry->title); ?>" /></td>
									</tr>
									<tr valign="top">
										<th scope="row"><?php _e('Start Date', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="start_date_time" id="start_date_time" class="date_input" value="<?php if (isset($entry->start_date_time)) echo date('m/d/Y', $entry->start_date_time); else echo date('m/d/Y'); ?>" />
											<select name="start_hour">
											<?php
											for ($i = 0; $i <= 12; $i++) {
												echo '<option';
												if ($entry != '' && $i == date('g', $entry->start_date_time)) echo ' selected="selected"';
												echo '>'.$i.'</option>';
											}
											?>
											</select>
											<select name="start_minutes">
											<?php
											for ($i = 0; $i < 60; $i++) {
												$i = str_pad($i, 2, "0", STR_PAD_LEFT);
												echo '<option value="'.$i.'"';
												if ($entry != '' && $i == date('i', $entry->start_date_time)) echo ' selected="selected"';
												echo '>'.$i.'</option>';
											}
											?>
											</select>
											<select name="start_meridiem">
												<option <?php if ('AM' == date('A', $entry->start_date_time)) echo ' selected="selected"'; ?>>AM</option>
												<option <?php if ('PM' == date('A', $entry->start_date_time)) echo ' selected="selected"'; ?>>PM</option>
											</select>										
										</td>
									</tr>
									<tr valign="top">
										<th scope="row"><?php _e('End Date', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="end_date_time" id="end_date_time" class="date_input" value="<?php if (isset($entry->start_date_time)) echo date('m/d/Y', $entry->end_date_time); else echo date('m/d/Y'); ?>" />
											<select name="end_hour">
											<?php
											for ($i = 1; $i <= 12; $i++) {
												echo '<option';
												if ($entry != '' && $i == date('g', $entry->end_date_time)) echo ' selected="selected"';
												echo '>'.$i.'</option>';
											}
											?>
											</select>
											<select name="end_minutes">
											<?php
											for ($i = 0; $i < 60; $i++) {
												$i = str_pad($i, 2, "0", STR_PAD_LEFT);
												echo '<option';
												if ($entry != ''&& $i == date('i', $entry->end_date_time)) echo ' selected="selected"';
												echo '>'.$i.'</option>';
											}
											?>
											</select>
											<select name="end_meridiem">
												<option <?php if ('AM' == date('A', $entry->end_date_time)) echo ' selected="selected"'; ?>>AM</option>
												<option <?php if ('PM' == date('A', $entry->end_date_time)) echo ' selected="selected"'; ?>>PM</option>
											</select>
										</td>
									</tr>
									<tr valign="top">
										<th scope="row"><?php _e('Repeat Interval', 'cgm_event_calendar'); ?></th>
										<td>
											<select name="repeat_interval" id="repeat_interval">
												<option <?php if ($entry->repeat_interval == 'none') echo 'selected="selected"'; ?>>none</option>
												<option <?php if ($entry->repeat_interval == 'this date of the month') echo 'selected="selected"'; ?>>this date of the month</option>
												<option <?php if ($entry->repeat_interval == 'this date of the year') echo 'selected="selected"'; ?>>this date of the year</option>
												<option <?php if ($entry->repeat_interval == 'last day of the month') echo 'selected="selected"'; ?>>last day of the month</option>
												<option <?php if ($entry->repeat_interval == 'last this day of the month') echo 'selected="selected"'; ?>>last this day of the month</option>
												<option <?php if ($entry->repeat_interval == 'this relative day of the month') echo 'selected="selected"'; ?>>this relative day of the month</option>
												<option <?php if ($entry->repeat_interval == 'weekdays') echo 'selected="selected"'; ?>>weekdays</option>
												<option <?php if ($entry->repeat_interval == 'weekends') echo 'selected="selected"'; ?>>weekends</option>
												<option <?php if ($entry->repeat_interval == 'days of week') echo 'selected="selected"'; ?>>days of week</option>
												<option <?php if ($entry->repeat_interval == 'these relative days') echo 'selected="selected"'; ?>>these relative days</option>
												<option <?php if ($entry->repeat_interval == 'daily') echo 'selected="selected"'; ?>>daily</option>
												<option value="1 week" <?php if ($entry->repeat_interval == '1 week') echo 'selected="selected"'; ?>>weekly</option>
												<option <?php if ($entry->repeat_interval == '2 weeks') echo 'selected="selected"'; ?>>2 weeks</option>
												<option <?php if ($entry->repeat_interval == '3 weeks') echo 'selected="selected"'; ?>>3 weeks</option>
												<option <?php if ($entry->repeat_interval == '4 weeks') echo 'selected="selected"'; ?>>4 weeks</option>
												<option <?php if ($entry->repeat_interval == '1 month') echo 'selected="selected"'; ?>>1 month</option>
												<option <?php if ($entry->repeat_interval == '2 months') echo 'selected="selected"'; ?>>2 months</option>
												<option <?php if ($entry->repeat_interval == '3 months') echo 'selected="selected"'; ?>>3 months</option>
												<option <?php if ($entry->repeat_interval == '4 months') echo 'selected="selected"'; ?>>4 months</option>
												<option <?php if ($entry->repeat_interval == '5 months') echo 'selected="selected"'; ?>>5 months</option>
												<option <?php if ($entry->repeat_interval == '6 months') echo 'selected="selected"'; ?>>6 months</option>
											</select>
										</td>
									</tr>

									<tr valign="top" id="days_of_week">
										<?php
										$disabled = '';
										$disabled_class = '';
										if ($entry->repeat_interval != 'days of week') {
											$disabled = 'disabled="disabled"';
											$disabled_class = 'class="disabled"';
										}
										?>
										<th scope="row" <?php echo $disabled_class; ?>><?php _e('Days of the week', 'cgm_event_calendar'); ?></th>
										<td>
											<label for="monday" <?php echo $disabled_class; ?>><?php _e('mon', 'cgm_event_calendar'); ?></label><input type="checkbox" name="monday" id="monday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 1, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="tuesday" <?php echo $disabled_class; ?>><?php _e('tue', 'cgm_event_calendar'); ?></label><input type="checkbox" name="tuesday" id="tuesday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 2, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="wednesday" <?php echo $disabled_class; ?>><?php _e('wed', 'cgm_event_calendar'); ?></label><input type="checkbox" name="wednesday" id="wednesday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 3, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="thursday" <?php echo $disabled_class; ?>><?php _e('thu', 'cgm_event_calendar'); ?></label><input type="checkbox" name="thursday" id="thursday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 4, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="friday" <?php echo $disabled_class; ?>><?php _e('fri', 'cgm_event_calendar'); ?></label><input type="checkbox" name="friday" id="friday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 5, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="saturday" <?php echo $disabled_class; ?>><?php _e('sat', 'cgm_event_calendar'); ?></label><input type="checkbox" name="saturday" id="saturday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 6, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="sunday" <?php echo $disabled_class; ?>><?php _e('sun', 'cgm_event_calendar'); ?></label><input type="checkbox" name="sunday" id="sunday" <?php echo $disabled; if ($entry->repeat_interval == 'days of week' && substr($entry->repeat_days, 0, 1) == '1') echo ' checked="checked"'; ?> />
										</td>
									</tr>
							
									<tr valign="top" id="these_relative_days">
										<?php
										$disabled = '';
										$disabled_class = '';
										if ($entry->repeat_interval != 'these relative days') {
											$disabled = 'disabled="disabled"';
											$disabled_class = 'class="disabled"';
										}
										?>
										<th scope="row" <?php echo $disabled_class; ?>><?php _e('These relative days', 'cgm_event_calendar'); ?></th>
										<td>
									
											<label for="first" <?php echo $disabled_class; ?>><?php _e('first', 'cgm_event_calendar'); ?></label><input type="checkbox" name="first" id="first" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 0, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="second" <?php echo $disabled_class; ?>><?php _e('second', 'cgm_event_calendar'); ?></label><input type="checkbox" name="second" id="second" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 1, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="third" <?php echo $disabled_class; ?>><?php _e('third', 'cgm_event_calendar'); ?></label><input type="checkbox" name="third" id="third" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 2, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="fourth" <?php echo $disabled_class; ?>><?php _e('fourth', 'cgm_event_calendar'); ?></label><input type="checkbox" name="fourth" id="fourth" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 3, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="fifth" <?php echo $disabled_class; ?>><?php _e('fifth', 'cgm_event_calendar'); ?></label><input type="checkbox" name="fifth" id="fifth" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 4, 1) == '1') echo ' checked="checked"'; ?> />
											<label for="last" <?php echo $disabled_class; ?>><?php _e('last', 'cgm_event_calendar'); ?></label><input type="checkbox" name="last" id="last" <?php echo $disabled; if ($entry->repeat_interval == 'these relative days' && substr($entry->repeat_days, 5, 1) == '1') echo ' checked="checked"'; ?> />
										</td>
									</tr>
							
									<tr valign="top">
										<th scope="row"><?php _e('Expiration Date', 'cgm_event_calendar'); ?></th>
										<?php
										if ($entry->expiration_date_time == 0) {
											$expiration_date = ''; 
										} else {
											$expiration_date = date('m/d/Y', $entry->expiration_date_time);
										}
										?>
										<td><input type="text" id="expiration_date_time" name="expiration_date_time" class="date_input" value="<?php if ($entry != '' && $entry->expiration_date_time != 0) echo date('m/d/Y', $entry->expiration_date_time); ?>" />
											<label for="repeat_forever"><?php _e('Repeat Forever', 'cgm_event_calendar'); ?></label><input type="checkbox" name="repeat_forever" id="repeat_forever" <?php if ($entry != '' && $entry->expiration_date_time == 0) echo 'checked="checked"'; ?>/>
										</td>
									</tr>
				
									<tr valign="top">
										<th scope="row"><?php _e('Location', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="location" id="entry_location" value="<?php echo htmlentities($entry->location); ?>" /></td>
									</tr>
							
									<tr valign="top">
										<th scope="row"><?php _e('Instructor', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="instructor" id="instructor" value="<?php echo htmlentities($entry->instructor); ?>" /></td>
									</tr>
				
									<tr valign="top">
										<td colspan="2">
											<div id="<?php echo user_can_richedit() ? 'postdivrich' : 'postdiv'; ?>" class="postarea">
												<?php the_editor(stripslashes($entry->description),'description','description', false); ?>
											</div>
										</td>
									</tr>
				
								</table>
								<?php
								if (is_numeric($entry_id)) {
									echo '<input type="hidden" name="action" value="update" />';
								} else {
									echo '<input type="hidden" name="action" value="new" />';
								}
								?>
			
								<p class="submit">
									<input type="submit" class="button-primary" value="<?php _e('Save Changes', 'cgm_event_calendar'); ?>" />
								</p>
								
							</div>

						</div><!-- /poststuff -->
			
					</div>
				</form>
			</div>
			<?php
			
			
		}

		//Display a list of all categories
		function display_categories() {
			global $wpdb;
			$wpdb->show_errors();

			$sql = "Select tag_id, tag_name, tag_color from ".$wpdb->prefix . "cgm_cal_tags order by tag_name asc";
			$entries = $wpdb->get_results($sql);
			?>
			<div class="wrap">

				<h2><?php _e('Calendar Categories', 'cgm_event_calendar'); ?></h2>
				<table class="widefat post fixed" cellspacing="0">
					<thead>
						<tr>
						<th scope="col" id="title" class="manage-column column-title" style=""><?php _e('Tag Name', 'cgm_event_calendar'); ?></th>
						<th scope="col" id="author" class="manage-column column-author" style=""><?php _e('Tag Color', 'cgm_event_calendar'); ?></th>
						</tr>
					</thead>
	
					<tfoot>
						<tr>
						<th scope="col" id="title" class="manage-column column-title" style=""><?php _e('Tag Name', 'cgm_event_calendar'); ?></th>
						<th scope="col" id="author" class="manage-column column-author" style=""><?php _e('Tag Color', 'cgm_event_calendar'); ?></th>
						</tr>
					</tfoot>
					<tbody>
		
					<?php
					foreach ($entries as $entry) {
						echo '
						<tr id="post-'.$entry->entry_id.'" class="alternate author-self status-publish iedit" valign="top">
							<td class="post-title column-title"><strong><a class="row-title" href="admin.php?page=cgm_calendar_category&amp;tag_id='.$entry->tag_id.'" title="Edit &#8220;'.$entry->tag_name.'">'.$entry->tag_name.'</a></strong>';
							echo '<div class="row-actions"><span class="edit"><a href="admin.php?page=cgm_calendar_category&amp;tag_id='.$entry->tag_id.'" title="Edit this category">'.__('Edit', 'cgm_event_calendar').'</a> | </span><span class="delete"><a class="submitdelete" title="Delete this calendar tag" href="admin.php?page=cgm_calendar_category&amp;delete_id='.$entry->tag_id.'" onClick="if ( confirm(\''.__('Are you sure you wish to delete this category?','cgm_event_calendar').'\') ) { return true;}return false;">'.__('Delete', 'cgm_event_calendar').'</a></span></div>';
							echo '</td>
							<td class="author column-author"><span class="color_sample" style="background: #'.$entry->tag_color.'">'.$entry->tag_color.'</span></td>
						</tr>';
					}
					?>
					</tbody>
				</table>
			</div>
			<?php
		}
		
		// EDIT/ADD/DELETE category
		function edit_category() {
			global $wpdb;
			global $current_user;
			$wpdb->show_errors();
			$error_message = '';
			
			// Delete the entry
			if (isset($_GET['delete_id']) && is_numeric($_GET['delete_id'])) {
				$delete = absint($_GET['delete_id']);
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_entry_tags where tag_id = '".$delete."'");
				$wpdb->query("delete from ".$wpdb->prefix."cgm_cal_tags where tag_id = '".$delete."'");
				return;
			}
						
			$tag_id = '';
			$tag = array();
			if (isset($_GET['tag_id']) && is_numeric($_GET['tag_id'])) {
				$tag_id = absint($_GET['tag_id']);
				$tag = $wpdb->get_row("SELECT * FROM ".$wpdb->prefix."cgm_cal_tags WHERE tag_id = '".$tag_id."'");
			}
			
			if (isset($_POST['action']) && ($_POST['action'] == 'new_category' || $_POST['action'] == 'update_category')) {
				$clean = $this->clean_input($_POST);
				
				// FILTER IN ANY GET INPUTS
				$repeat_days = '0000000';
				$repeat = 0;

				$error_message = '';
				$clean['tag_color'] = trim($clean['tag_color'], '#');
				
				if ($clean['tag_name'] == '') $error_message .= __('You must enter a name.', 'cgm_event_calendar')."\n";
				if ($clean['tag_color'] == '') $error_message .= __('You must select a color.', 'cgm_event_calendar')."\n";
	
				if ($error_message == '') {
		
					
					$table_name = $wpdb->prefix . "cgm_cal_tags";
					if ($clean['action'] == 'update_category') {
	
						$data = array(
							'tag_name' => $clean['tag_name'],
							'tag_color' => $clean['tag_color']
							);
						$where = array('tag_id' => $tag_id);
						$wpdb->update( $table_name, $data, $where, '%s', '%d' );
						$updated = true;
						
					} else {
						
						$data = array(
							'tag_name' => $clean['tag_name'],
							'tag_color' => $clean['tag_color']
							);
						
						$wpdb->insert( $table_name, $data );
						$inserted = true;
						
					}
				}
				$tag = $this->parseArrayToObject($clean);
			}
				
			
			?>
			<script type="text/javascript">
			jQuery(document).ready(function($) {
				$('#colorpicker').farbtastic('#tag_color');
			});
			</script>
			<div class="wrap" id="events_calendar_admin">
				
				<?php
				if (isset($error_message) && $error_message != '') {
					echo '<div id="message" class="error"><p>'.$error_message.'</p></div>';
				} else if (isset($updated) && $updated) {
					echo '<div id="message" class="updated"><p>'.__('Category Updated', 'cgm_event_calendar').'</p></div>';
				} else if (isset($inserted) && $inserted) {
					echo '<div id="message" class="updated"><p>'.__('Category Inserted', 'cgm_event_calendar').'</p></div>';
				}
				?>
				
				<div id="icon-edit" class="icon32"><br /></div>
				<?php
				if (is_numeric($tag_id)) {
					echo '<h2>'.__('Edit Calendar Category', 'cgm_event_calendar').'</h2>';
				} else {
					echo '<h2>'.__('Add Calendar Category', 'cgm_event_calendar').'</h2>';
				}
				?>

				<form method="post" action="admin.php?page=cgm_calendar_category&amp;tag_id=<?php echo $tag_id; ?>">
					<div id="poststuff" class="metabox-holder has-right-sidebar">
				
						<div id="post-body">
							<div id="post-body-content">
				
								<table class="form-table">
									<tr valign="top">
										<th scope="row"><?php _e('Name', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="tag_name" id="tag_name" value="<?php echo $tag->tag_name; ?>" /></td>
									</tr>
							
									<tr valign="top">
										<th scope="row"><?php _e('Color', 'cgm_event_calendar'); ?></th>
										<td><input type="text" name="tag_color" id="tag_color" style="background: #<?php echo $tag->tag_color; ?>;" value="#<?php echo $tag->tag_color; ?>" /><div id="colorpicker"></div></td>
								
									</tr>
								</table>
								<?php
								if (is_numeric($tag_id)) {
									echo '<input type="hidden" name="action" value="update_category" />';
								} else {
									echo '<input type="hidden" name="action" value="new_category" />';
								}
								?>
			
								<p class="submit">
									<input type="submit" class="button-primary" value="<?php _e('Save Changes', 'cgm_event_calendar'); ?>" />
								</p>
								
							</div>

						</div><!-- /poststuff -->
			
					</div>
				</form>
			</div>
			<?php
		}

		function cgm_cal_the_content($content) {
			$content = apply_filters('cgm_cal_the_content', $content);
			$content = str_replace(']]>', ']]&gt;', $content);
			return $content;
		}


		function days_difference($start_date, $end_date) {
			if ($start_date > $end_date) return 0;
			$count = 0;
			while ($start_date < $end_date) {
				if ( (date('Y', $start_date) < date('Y', $end_date)) || ( date('Y', $start_date) == date('Y', $end_date) && date('n', $start_date) < date('n', $end_date) ) || ( date('Y', $start_date) == date('Y', $end_date) && date('n', $start_date) == date('n', $end_date) && date('j', $start_date) < date('j', $end_date) ) ) {
					$count++;
				}
				$start_date += (24*60*60);
			}
			return $count;
		}

		// DETERMINE WHICH CALENDAR OR EVENT TO DISPLAY
		function set_up_calendar($atts = '') {		


			$settings = shortcode_atts(array(
										"set_display"				=> $this->admin_options['cgm_ec_view_default'],
										"set_start_time"			=> $this->admin_options['cgm_ec_start_time'],
										"set_end_time"				=> $this->admin_options['cgm_ec_end_time'],
										"set_highlight_category"	=> $this->admin_options['cgm_ec_highlight_category']
									), $atts);
			extract($settings);
			
			$clean = $this->clean_input($_GET);

			$this->display = $set_display;
			$display = $set_display;
			$this->start_time = $set_start_time;
			$this->end_time = $set_end_time;
			
			if (isset($_GET['display'])) {
				if ($_GET['display'] == 'week') 
					$this->display = 'week';
				else if ($_GET['display'] == 'month')
					$this->display = 'month';
			}

			
			if (isset($clean['date'])) {
				$date = explode('/', $clean['date']);
				// CHECK FOR CORRECT YEAR NUMBER
				
				if (isset($date[0]) && (preg_match('[^0-9]', $date[0]) || strlen($date[0]) != 4)) {
					$date = '';
				} else {
					$this->year = $date[0];
				}
				
				if ((isset($date[1]) && preg_match('[^0-9]', $date[1])) || !isset($date[1])) {
					$date = '';
				} else {
					// CHECK FOR CORRECT WEEK NUMBER
					if ($this->display == 'week' && (intval($date[1]) < 1 || intval($date[1]) > 53)) {
						$date = '';
					} else if ($this->display == 'week') {
						$this->week = $date[1];
					}
					// CHECK FOR CORRECT MONTH NUMBER
					if ($this->display == 'month' && (intval($date[1]) < 1 || intval($date[1]) > 12)) {
						$date = '';
					} else if ($this->display == 'month') {
						$this->month = $date[1];
					}
				}
				
				
				
				if ((isset($date[2]) && (preg_match('[^0-9]', $date[2]) || (intval($date[2]) < 1 || intval($date[2]) > 31))) || !isset($date[2])) {
					$date = '';
				} else {
					$this->day = $date[2];
					$this->display = 'day';
				}
			
			}
	
			
	
			$this->week = str_pad($this->week, 2, '0', STR_PAD_LEFT);
			switch($this->display) {
				case 'year':
					$this->start_date = $this->dbtime(0,0,0,1,1,$this->year);
					$this->end_date = $this->dbtime(23,59,59,12,31,$this->year);
					break;
				case 'day':
					$this->start_date = $this->dbtime(0,0,0,$this->month, $this->day, $this->year);
					$this->end_date = $this->dbtime(23,59,59,$this->month, $this->day, $this->year);
					break;
				case 'week':
					$this->start_date = strtotime($this->year."W".$this->week.'0');
					$this->end_date = strtotime($this->year."W".$this->week.'6')+(60*60*24)-1;
					break;
				default: //month view is default
					$this->start_date = $this->dbtime(0,0,0,$this->month, 1, $this->year);
					$this->end_date = $this->dbtime(23,59,59,$this->month, date('t', mktime(0,0,1,$this->month, $this->day, $this->year)), $this->year);		
					break;
			}
			
		
			// DISPLAY A SINGLE ENTRY
			if (isset($clean['entry']) && !preg_match('[^0-9]', $clean['entry']) && $clean['entry'] > 0) {
				return $this->display_entry($clean['entry']);
			}
			
			// DISPLAY THE DAYS EVENTS
			if ($this->display == 'day') {
				return $this->display_day();			
			} 
			
			$tag_list = '';
			// DISPLAY A WEEK OF EVENTS
			if ($this->display == 'week') {
				if ($this->admin_options['display_category_sorter'] == 1) {
					if (!isset($_GET['view']) || $_GET['view'] != 'print') $tag_list = $this->get_tag_list();
				}
				
				$week_calendar =  $this->print_weekly_calendar($start_date, $clean['tagid']);
				return '<div id="calendar_week">'.$tag_list.$week_calendar.'</div>';
			} 
			
			// DISPLAY A MONTH OF EVENTS
			if ($this->display == 'month') {
				
				if ($this->admin_options['display_category_sorter'] == 1) {
					if (!isset($_GET['view']) || $_GET['view'] != 'print') $tag_list = $this->get_tag_list();
				}
				
				if (!isset($clean['tagid']) && !preg_match('[^0-9]', $clean['entry']) && $clean['entry'] > 0) {
					$clean['tagid'] = '';
				}
		
				$month_calendar = $this->print_monthly_calendar($clean['tagid']);
				return '<div id="calendar_month">'.$tag_list.$month_calendar.'</div>';
			}
		
			
		}
		
		function pa($array) {
	        echo '<div>---------------------------<pre>';
	        print_r($array);
	        echo '</pre>---------------------------</div>';
		}
		
		/*
		RETURN AN ARRAY OF TAGS FOR THE SPECIFIC ENTRY
		Input: entry id
		Output: array of tags for the entry
		*/
		function get_entry_tags($entry_id) {
			global $wpdb;
			$tags = array();
			$data = $wpdb->get_results("select td.tag_id, td.tag_name, td.tag_color from ".$wpdb->prefix."cgm_cal_tags td, ".$wpdb->prefix."cgm_cal_entry_tags t where t.entry_id = '".$entry_id."' and t.tag_id = td.tag_id");
			foreach ($data as $tag) {
				$tags[] = array('tag_id' => $tag->tag_id, 'tag_name' => $tag->tag_name, 'tag_color' => $tag->tag_color);
			}
			return $tags;
		}
		
		
		/*
		RETURN ARRAY OF EXCLUDED ENTRIES
		Input:	entry_data (array of entry data that repeats)
		Output: array of excluded entries and their details
		---------------------------------------------------------------
		*/
		function get_exclude_dates($entry_data) {
			global $link;
			global $wpdb;
			$temp = $entry_data;
		
			$start = $this->dbtime(0,0,0,date('n', $this->start_date), date('j', $this->start_date), date('Y', $this->start_date));
			$end = $this->dbtime(23,59,59,date('n', $this->end_date), date('j', $this->end_date), date('Y', $this->end_date));
		
			$start_hour = date('H', $entry_data['start_date_time']);
			$start_minute = date('i', $entry_data['start_date_time']);
			$start_second = date('s', $entry_data['start_date_time']);
		
			$end_hour = date('H', $entry_data['end_date_time']);
			$end_minute = date('i', $entry_data['end_date_time']);
			$end_second = date('s', $entry_data['end_date_time']);
		
			$days_difference = $this->days_difference($entry_data['start_date_time'], $entry_data['end_date_time']);
		
			$dates = array();
		
			$data = $wpdb->get_results("select exclude_date, every_year from ".$wpdb->prefix."cgm_cal_entry_excludes where entry_id = '".$entry_data['entry_id']."' and ((exclude_date >= '".$start."' and exclude_date <= '".$end."') or every_year = 1)");
			foreach ($data as $date) {
				$day = date("j", $date->exclude_date); // Fetch the date of the month
				$month = date("n", $date->exclude_date); // Fetch the month
				$i = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $date->exclude_date), date('j', $date->exclude_date), date('Y', $date->exclude_date));
				$temp['every_year'] = $date->every_year;
				if ($date->every_year == 1) {
					$a = 0;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i < $this->start_date) {
							$year = date("Y", $i);  // Fetch the year
							$year++;
							$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
							continue;
						}
						if ($i >= $entry_data['start_date_time']) {
							$temp['start_date_time'] = $i;
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, date('Y', $i));
							$temp['start'] = date('G:i m/d/Y', $temp['start_date_time']);
							$temp['end'] = date('G:i m/d/Y', $temp['end_date_time']);
							$dates[] = $temp;
						}
						$year = date("Y", $i);  // Fetch the year
						$year++;
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
						$a++;
						if ($a > 10000) break;
					}
				} else {
					$temp['start_date_time'] = $i;
					$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, date('Y', $i));
					$temp['start'] = date('G:i m/d/Y', $temp['start_date_time']);
					$temp['end'] = date('G:i m/d/Y', $temp['end_date_time']);
					$dates[] = $temp;
				}
			}
			
			return $dates;
		}
		
		function multi_sort(&$array, $key, $asc=true) {
			$sorter = new array_sorter($array, $key, $asc);
			return $sorter->sortit();
		}
		
		/*
		RETURN ARRAY OF INCLUDED ENTRIES
		Input:	entry_data (array of entry data that repeats)
		Output: array of inlcuded entries and their details
		---------------------------------------------------------------
		*/
		function get_include_dates($entry_data) {
			global $link;
			global $wpdb;
			$temp = $entry_data;

			$start = $this->start_date;
			$end = $this->end_date;

			$start_hour = date('H', $entry_data['start_date_time']);
			$start_minute = date('i', $entry_data['start_date_time']);
			$start_second = date('s', $entry_data['start_date_time']);
		
			$end_hour = date('H', $entry_data['end_date_time']);
			$end_minute = date('i', $entry_data['end_date_time']);
			$end_second = date('s', $entry_data['end_date_time']);
		
			$days_difference = $this->days_difference($entry_data['start_date_time'], $entry_data['end_date_time']);
	
			$dates = array();
		
			$data = $wpdb->get_results("select include_date, every_year from ".$wpdb->prefix."cgm_cal_entry_includes where entry_id = '".$entry_data['entry_id']."' and ((include_date >= '".$start."' and include_date <= '".$end."') or every_year = 1)");
		
			foreach ($data as $date) {
				$day = date("j", $date->include_date); // Fetch the date of the month
				$month = date("n", $date->include_date); // Fetch the month

				$i = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $date->include_date), date('j', $date->include_date), date('Y', $date->include_date));
				$temp['every_year'] = $date->every_year;
				if ($date->every_year == 1) {
					$a = 0;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i < $this->start_date) {
							$year = date("Y", $i);  // Fetch the year
							$year++;
							$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
							continue;
						}
						if ($i >= $entry_data['start_date_time']) {
							$temp['start_date_time'] = $i;
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, date('Y', $i));
							$temp['start'] = date('G:i m/d/Y', $temp['start_date_time']);
							$temp['end'] = date('G:i m/d/Y', $temp['end_date_time']);
							$dates[] = $temp;
						}
						$year = date("Y", $i);  // Fetch the year
						$year++;
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
						$a++;
						if ($a > 10000) break;
					}
				} else {
					$temp['start_date_time'] = $i;
					$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, date('Y', $i));
					$temp['start'] = date('G:i m/d/Y', $temp['start_date_time']);
					$temp['end'] = date('G:i m/d/Y', $temp['end_date_time']);
					$dates[] = $temp;
				}
			}
		
			return $dates;
		}	
		
	
		/*
		RETURN ARRAY OF REPEATED EVENTS
		Input:	entry_data (array of event data that repeats)
		Output: array of events and their details (same as input but with all of the repeated events added)
		---------------------------------------------------------------
		*/
		function get_repeating_dates($entry_data) {
			$temp = $entry_data;

			// GET THE STARTING HOURS AND MINUTES AS THEY WON'T CHANGE
			$start_hour = date('H', $entry_data['start_date_time']);
			$start_minute = date('i', $entry_data['start_date_time']);
			$start_second = date('s', $entry_data['start_date_time']);
			
			// GET THE ENDING HOURS AND MINUTES AS THEY WON'T CHANGE
			$end_hour = date('H', $entry_data['end_date_time']);
			$end_minute = date('i', $entry_data['end_date_time']);
			$end_second = date('s', $entry_data['end_date_time']);
		
			// FIND THE NUMBER OF DAYS BETWEEN THE START AND END DATES
			$days_difference = $this->days_difference($entry_data['start_date_time'], $entry_data['end_date_time']);
		
			$dates = array();
		
			$interval = $entry_data['repeat_interval'];
			switch($interval) {
		
				case 'this date of the month':
					$day = gmdate('j', $entry_data['start_date_time']);
					$i = $entry_data['start_date_time'];
					$a = 1;
				
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$month = gmdate("n", $i); // Fetch the month
						$year = gmdate("Y", $i);  // Fetch the year
						if ($month == 12) {
							$year++;
							$month = 1;
						} else {
							$month++;
						}
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
				
				case 'this date of the year':
					$day = date("j", $entry_data['start_date_time']); // Fetch the date of the month
					$month = date("n", $entry_data['start_date_time']); // Fetch the month
					$i = $entry_data['start_date_time'];
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$year = date("Y", $i);  // Fetch the year
						$year++;
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
				
				case 'last day of the month':
				
					$month = date("n", $entry_data['start_date_time']); // Fetch the month
					$year = date("Y", $entry_data['start_date_time']);  // Fetch the year
					$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, date('t', $entry_data['start_date_time']), $year);
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						} 
						$month = date("n", $i); // Fetch the month
						$year = date("Y", $i);  // Fetch the year
						if ($month == 12) {
							$year++;
							$month = 1;
						} else {
							$month++;
						}
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, date('t', $this->dbtime(0, 0, 0, $month, 1, $year)), $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			
				// (i.e. last Monday of the month)
				case 'last this day of the month':
					$i = $entry_data['start_date_time'];
					$d_o_m = date('D', $entry_data['start_date_time']); //day of month (i.e. Mon)
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$month = date("n", $i); // Fetch the month
						$year = date("Y", $i);  // Fetch the year
						if ($month == 12) {
							$year++;
							$month = 1;
						} else {
							$month++;
						}
						$day = 1;
						while ($day <= date('t', $this->dbtime(0, 0, 0, $month, 1, $year))) {
							if (date('D', $this->dbtime(0, 0, 0, $month, $day, $year)) == $d_o_m) {
								$last_day = $day;
							}						
							$day++;
						}
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $last_day, $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
				
				// Relative day of the month (i.e. 3rd Tuesday)
				case 'this relative day of the month':
					$i = $entry_data['start_date_time'];
					$d_o_m = date('D', $i); //day of month (i.e. Mon)
					$d_i_m = date('j', $i); //day in month (i.e. 21)
					$month = date("n", $i); // Fetch the month
					$year = date("Y", $i);  // Fetch the year
					$day = 1;
					$relative = 0;
					while ($day <= date('t', $this->dbtime(0, 0, 0, $month, 1, $year)) && $day <= $d_i_m) {
						if (date('D', $this->dbtime(0, 0, 0, $month, $day, $year)) == $d_o_m) {
							$relative++;
						}
						$day++;
					}
				
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
					
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$month = date("n", $i); // Fetch the month
						$year = date("Y", $i);  // Fetch the year
						if ($month == 12) {
							$year++;
							$month = 1;
						} else {
							$month++;
						}
						$day = 1;
						$this_relative = 0;
						while ($day <= date('t', $this->dbtime(0, 0, 0, $month, 1, $year)) && $this_relative < $relative) {
							if (date('D', $this->dbtime(0, 0, 0, $month, $day, $year)) == $d_o_m) {
								$last_day = $day;
								$this_relative++;
							}						
							$day++;
						}
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, $last_day, $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			
				case 'weekdays':
					$i = $entry_data['start_date_time'];
					$a = 1;
					$dow = date("w", $i);
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i < $this->start_date) {
							$i += 86400;
							continue;
						}
						if (($dow > 0) && ($dow < 6)) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						if ($dow == 6) {
							$dow = 0;
						} else {
							$dow++;
						}
						$i += 86400;
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
				
				case 'weekends':
					$i = $entry_data['start_date_time'];
					$a = 1;
					$dow = date("w", $i);
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						$dow = date("w", $i);
						if ($i < $this->start_date) {
							$i += 86400;
							continue;
						}
						if (($dow == 0) || ($dow == 6)) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$i += 86400;
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			
				// Days of the week (i.e. Mon, Wed, Fri)
				case 'days of week':
					$i = $entry_data['start_date_time'];
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i < $this->start_date) {
							$i += 86400;
							continue;
						}
						$dow = date("w", $i);
						if (substr($entry_data['repeat_days'], $dow, 1) == 1) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$i += 86400;
						$a++;
						if ($a > 10000) break;
					}
					break;
			
				// These relative days of the month (i.e. first, second, third Wednesday)
				case 'these relative days':
					$i = $entry_data['start_date_time'];
					$d_o_m = date('D', $i); //day of month (i.e. Mon)
					$a = 1;

					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i < $this->start_date) {
							$i += 86400;
							continue;
						}
						$month = date("n", $i); // Fetch the month
						$year = date("Y", $i);  // Fetch the year

						$day = date("j", $i);
						$relative = 0;
						while ($day <= date('t', $this->dbtime(0, 0, 0, date('n', $i), 1, date('Y', $i)))) {
							if ($this->dbtime(0, 0, 0, $month, $day, $year) >= $this->start_time && date('D', $this->dbtime(0, 0, 0, $month, $day, $year)) == $d_o_m) {
								$relative++;
								if (substr($entry_data['repeat_days'], $relative-1, 1) == 1) {
									$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
									$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, $year);
									$dates[] = $temp;
								} else if ($month != date('n', $this->dbtime(0,0,0, $month, ($day+7), $year)) && substr($entry_data['repeat_days'], 5, 1) == 1) {
									$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, $month, $day, $year);
									$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, $month, $day+$days_difference, $year);
									$dates[] = $temp;
								}
							}						
							$day++;
						}
						if ($month == 12) {
							$year++;
							$month = 1;
						} else {
							$month++;
						}
						$i = $this->dbtime($start_hour, $start_minute, $start_second, $month, 1, $year);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			
				case 'daily':
					$day = date('j', $entry_data['start_date_time']);
					$i = $entry_data['start_date_time'];
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$i += 86400;
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			
				default:
					$i = $entry_data['start_date_time'];
					$a = 1;
					while ($i <= $this->end_date && ($i <= $entry_data['expiration_date_time'] || $entry_data['expiration_date_time'] == 0)) {
						if ($i >= $this->start_date || $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i)) >= $this->start_date) {
							$temp['start_date_time'] = $this->dbtime($start_hour, $start_minute, $start_second, date('n', $i), date('j', $i), date('Y', $i));
							$temp['end_date_time'] = $this->dbtime($end_hour, $end_minute, $end_second, date('n', $i), date('j', $i)+$days_difference, date('Y', $i));
							$dates[] = $temp;
						}
						$i = strtotime($interval, $i);
						$a++;
						if ($a > 10000) break; // Just in case...
					}
					break;
			}
		
			// GET THE SPECIAL EXCLUDE DATES AND REMOVE THEM FROM THE ARRAY IF THEY ARE IN
			$temp = array();
			$temp = $this->get_exclude_dates($entry_data);
		
			foreach ($temp as $record) {
				$found = false;
				$cnt = 0;
				foreach ($dates as $date) {
					if (gmdate('m/d/Y', $date['start_date_time']) == gmdate('m/d/Y', $record['start_date_time'])) {
						$found = true;
						break;
					}
					$cnt++;
				}
				if ($found) {
					array_splice($dates, $cnt, 1);
				}
			}
			
				
			return $dates;
		}
		
		/*
		RETURN ENTRY INFORMATION
		Input: entry id
		Output: an array of information
		*/
		function get_entry_info($entry_id) {
			global $link;
			global $wpdb;
			$result = $wpdb->get_row("select * from ".$wpdb->prefix."cgm_cal_entries where entry_id = '".$entry_id."'", ARRAY_A);
		
			if ($result == '') {
				$result['error'] = __('Invalid entry id', 'cgm_event_calendar');
				return $result;
			}
		
			$result['tags'] = $this->get_entry_tags($entry_id);
		
			$result['next_date'] = array();
			if ($result['does_repeat'] == '1') {
				$upcoming_events = array();
				if ($this->dbtime() < $result['expiration_date_time'] || $result['expiration_date_time'] == 0) {
					while (count($upcoming_events) <= 10 && ($this->end_date <= $result['expiration_date_time'] || $result['expiration_date_time'] == 0)) {
						$this->start_date = $this->dbtime();
						$this->end_date = $this->dbtime(23,59,59,date('m', $this->end_date)+1, date('d', $this->end_date), date('Y', $this->end_date));
						$temp = $this->get_repeating_dates($result);
						$upcoming_events = array_merge($upcoming_events, $temp);
					}
				}
				$result['next_date'] = $temp;
			}
	
			// GET THE SPECIAL INCLUDED DATES AND ADD THEM TO THE ARRAY IF THEY ARE NOT ALREADY IN
			$temp = array();
			$this->start_date = $this->dbtime();
			$this->end_date = $this->end_date + (60*60*24*365);
			$temp = $this->get_include_dates($result);
			foreach ($temp as $record) {
				$found = false;
				$record['start_time'] = date('g:i a', $result['start_date_time']);
				$record['end_time'] = date('g:i a', $result['end_date_time']);
				$record['sort_order'] = date('Gi', $result['start_date_time']);
				
				foreach ($result['next_date'] as $date) {
					if (date('m/d', $date['start_date_time']) == date('m/d', $record['start_date_time']) && $date['entry_id'] == $record['entry_id']) {
						$found = true;
					}
				}
				if (!$found) {
					$result['next_date'][] = $record;
				}
			}
			$result['next_date'] = $this->multi_sort($result['next_date'], "start_date_time", false);

			return $result;
		}
	
	
		/*
		RETURN ARRAY OF EVENT DETAILS FOR THE EVENT START AND END DATES AND TAG ID
		Input:	tag id (id of tag)
		Output: array of events and their details
		---------------------------------------------------------------
		*/
		function get_entry_details($tag_id = '') {
			global $link;
			global $wpdb;
			$entries = array();
		
			$tag_tables = '';
			$tag_sql = '';
			if ($tag_id != '' && is_array($tag_id)) {
				$in_tags = '';
				foreach ($tag_id as $tag) {
					if (is_numeric($tag)) {
						$in_tags .= $tag.',';
					}
				}
				$in_tags = trim($in_tags, ',');
				if($in_tags != '') {
					$tag_tables = ', '.$wpdb->prefix.'cgm_cal_entry_tags t';
					$tag_sql = "e.entry_id = t.entry_id and t.tag_id in (".$in_tags.") and ";
				}
			}
			
			$data = $wpdb->get_results("select e.* from ".$wpdb->prefix . "cgm_cal_entries e ".$tag_tables." where ".$tag_sql." e.start_date_time <= '".$this->end_date."' and (e.does_repeat = 1 || e.end_date_time >= '".$this->start_date."') and (e.expiration_date_time >= '".$this->start_date."' || e.expiration_date_time = 0 || e.repeat_interval = 'none') order by e.start_date_time asc", ARRAY_A);
						
			$include_dates = $wpdb->get_results("select e.* from ".$wpdb->prefix . "cgm_cal_entries e ".$tag_tables.", ".$wpdb->prefix."cgm_cal_entry_includes ei where ".$tag_sql." ei.include_date >= '".$this->start_date."' and ei.include_date <= '".$this->end_date."' and e.entry_id = ei.entry_id order by e.start_date_time asc", ARRAY_A);
			if (is_array($include_dates)) {
				foreach ($include_dates as $record) {
					$found = false;	
					if (is_array($data)) {
						foreach ($data as $entry) {
							if ($entry['entry_id'] == $record['entry_id']) {
								$found = true;
							}
						}
					}
					if (!$found) {
						$data[] = $record;
					}
				}
			}
			if ($data == '') {
				return $entries;
			}
		
			foreach ($data as $entry) {
			
				if ($entry['does_repeat'] == '1') {
					$temp = $this->get_repeating_dates($entry);
					foreach ($temp as $record) {
						$record['day_difference'] = $this->days_difference($record['start_date_time'], $record['end_date_time']);
						$record['start_time'] = date('g:i a', $entry['start_date_time']);
						$record['end_time'] = date('g:i a', $entry['end_date_time']);
						$record['sort_order'] = date('Gi', $entry['start_date_time']);
						$entries[] = $record;
					}
				} else {
					if ($entry['start_date_time'] <= $this->end_date) {
						$entry['day_difference'] = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
						$entry['start_time'] = date('g:i a', $entry['start_date_time']);
						$entry['end_time'] = date('g:i a', $entry['end_date_time']);
						$entry['sort_order'] = date('Gi', $entry['start_date_time']);
						$entries[] = $entry;
					}
				}
			
				// GET THE SPECIAL INCLUDED DATES AND ADD THEM TO THE ARRAY IF THEY ARE NOT ALREADY IN
				$temp = array();
				$temp = $this->get_include_dates($entry);
				foreach ($temp as $record) {
					$found = false;
					$record['start_time'] = date('g:i a', $record['start_date_time']);
					$record['end_time'] = date('g:i a', $record['end_date_time']);
					$record['sort_order'] = date('Gi', $record['start_date_time']);
					
					foreach ($entries as $date) {
						if (date('m/d', $date['start_date_time']) == date('m/d', $record['start_date_time']) && $date['entry_id'] == $record['entry_id']) {
							$found = true;
						}
					}
					if (!$found) {
						$entries[] = $record;
					}
				}
				
			}
		
			//sort by parent_id in descending order
	    	$entries = $this->multi_sort($entries, "sort_order", false);
			return $entries;
		}
		
				
		function display_entry($entry_id) {
			$this->start_date = $this->dbtime();
			$entry =  $this->get_entry_info($entry_id);
			
			ob_start();
			echo '<div id="calendar_entry">';

			echo '<div class="large_calendar_month"><span class="left"><a href="'.$this->current_page().'date=';
			if (isset($this->display)) {
				if ($this->display == 'week') {
					if (date('N', $this->start_date) == 7) {
						echo date('Y/W', $this->start_date+(60*60*25)).'&amp;display='.$this->display;
					} else {
						echo date('Y/W', $this->start_date).'&amp;display='.$this->display;
					}
				} else if ($this->display == 'month') {
					echo date('Y/m', $this->start_date).'&amp;display='.$this->display;
				} else {
					echo date('Y/m');
				}
			} else {
				echo  date ('Y/m');
			}
			echo '"><< '.$this->admin_options['calendar_title'].'</a></span><span class="right"><a href="'.$this->current_page().'date='.date('Y/m/d');
			if (isset($this->display) && ($this->display == 'week' || $this->display == 'month')) {
				echo '&amp;display='.$this->display;
		
			}
			echo '">'.__('Todays Events', 'cgm_event_calendar').' >></a></span></div>';
	
			echo '<h2>'.$entry['title'].'</h2>';
		
			if (count($entry['next_date']) > 0) {
				$days_difference = $this->days_difference($entry['next_date'][0]['start_date_time'], $entry['next_date'][0]['end_date_time']);
				if ($days_difference > 0) {
					echo '<p class="event_date">Date: '.date('F, jS Y g:i a', $entry['next_date'][0]['start_date_time']).' - '.date('F, jS Y g:i a', $entry['next_date'][0]['end_date_time']).'</p>';
				} else {
					echo '<p class="event_date">Date: '.date('F, jS Y g:i a', $entry['next_date'][0]['start_date_time']).' - '.date('g:i a', $entry['next_date'][0]['end_date_time']).'</p>';
				}
		
			} else {
				$label = 'Date';
				$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
				if ($days_difference > 0) {
					echo '<p class="event_date">'.$label.': '.date('F, jS Y g:i a', $entry['start_date_time']).' - '.date('F, jS Y g:i a', $entry['end_date_time']).'</p>';
				} else {
					echo '<p class="event_date">'.$label.': '.date('F, jS Y g:i a', $entry['start_date_time']).' - '.date('g:i a', $entry['end_date_time']).'</p>';
				}
			}
	
			echo $this->cgm_cal_the_content($entry['description']);
	
			if (isset($entry['location']) && $entry['location'] != '') {
				echo '<p><strong>'.__('Location', 'cgm_event_calendar').'</strong><br />';
				echo $entry['location'].'</p>';
			}
	
			if (isset($entry['instructor']) && $entry['instructor'] != '') {
				echo '<p><strong>'.__('Instructor', 'cgm_event_calendar').'</strong><br />';
				echo $entry['instructor'].'</p>';
			}
	
			if (count($entry['next_date']) > 0) {
				echo '<h3 style="margin: 15px 0 10px;">'.__('Upcoming Dates:', 'cgm_event_calendar').'</h3>';
				echo '<ul>';
				$counter = 0;
				foreach ($entry['next_date'] as $next_date) {
					$days_difference = $this->days_difference($next_date['start_date_time'], $next_date['end_date_time']);
					if ($counter < 10) {
						if ($days_difference > 0) {
							echo '<li>'.date('m/d/Y', $next_date['start_date_time']).' '.date('g:i a', $entry['start_date_time']).' - '.date('m/d/Y g:i a', $next_date['end_date_time']).'</li>';
						} else {
							echo '<li>'.date('m/d/Y', $next_date['start_date_time']).' '.date('g:i a', $entry['start_date_time']).' - '.date('g:i a', $next_date['end_date_time']).'</li>';
						}
				
						$counter++;
					}
				}
				echo '</ul>';
			}
	
			echo '</div>';
			$display_return = ob_get_clean();
			return $display_return;
		}

		function display_day() {
			
			ob_start();
			echo '<div id="calendar_day">';
	
			echo '<div class="large_calendar_month"><span class="left"><a href="'.$this->current_page().'date=';
			if (isset($this->display)) {
				if ($this->display == 'week') {
					if (date('N', $this->start_date) == 7) {
						echo date('Y/W', $this->start_date+(60*60*25)).'&amp;display='.$this->display;
					} else {
						echo date('Y/W', $this->start_date).'&amp;display='.$this->display;
					}
				} else if ($this->display == 'month') {
					echo date('Y/m', $this->start_date).'&amp;display='.$this->display;
				} else {
					echo date('Y/m');
				}
			} else {
				echo  date ('Y/m');
			}
			echo '&display='.$this->display.'"><< '.$this->admin_options['calendar_title'].'</a></span></div>';
	
			echo '<h2>'.__('Daily Events for', 'cgm_event_calendar').' '.date('l, M jS, Y', $this->start_date).'</h2>';
			echo $this->get_entries_list($this->start_date);
	
			echo '</div>';
			$display_return = ob_get_clean();
			return $display_return;
		}

		function get_tag_list() {
			
			ob_start();
			
			global $wpdb;
			$data = $wpdb->get_results("select tag_id, tag_name, tag_color from ".$wpdb->prefix."cgm_cal_tags order by tag_name");
			echo '<div id="tag_list">';
			echo '<h3>'.__('Sort by Categories', 'cgm_event_calendar').'</h3>';
			$pageURL = 'http';
			if ($_SERVER["HTTPS"] == "on") {
				$pageURL .= "s";
			}
			$pageURL .= "://";
			if ($_SERVER["SERVER_PORT"] != "80") {
				$pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
			} else {
				$pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
			}
			
			$parts = explode('?', $pageURL);
			$pageURL = $parts[0];
			$get = '';
			
			$strip_array = array('tagid');
			foreach($_GET as $key => $value) {
				if (!in_array($key, $strip_array)) {
					$get .= $key.'='.$value.'&';
				}
			}

			$url = $url.'?'.$get;
			
			echo '<p class="first_tag"><a href="'.$url.'"';
			if (!isset($_GET['tagid'])) echo ' class="active"';
			echo '>'.__('View All Categories', 'cgm_event_calendar').'</a></p>';
			foreach ($data as $tag) {

				echo '<p><a href="'.$url.'tagid='.$tag->tag_id.'"';
				if (isset($_GET['tagid']) && $_GET['tagid'] == $tag->tag_id) echo ' class="active"';
				echo '><span class="entry_tag" id="tag_color_'.$tag->tag_id.'" style="background: #'.$tag->tag_color.';"></span>'.$tag->tag_name.'</a></p>';
			}
			echo '</div>';
			$display_return = ob_get_clean();
			return $display_return;
		}

		function print_monthly_calendar($tag_id = '') {
			
			ob_start();
		
			$day_name_length = 4;
			$view = 'month';
		
			$month = date('n', $this->start_date);
			$end_month = date('n', $this->end_date);
			$week = date('W', $this->start_date+(60*60*48));
			if (date('N', $this->start_date) == 7) {
				$clean['week']++;
			}
			$year = date('Y', $this->start_date);

			$day_names = array();
			for($n=0,$t=(3)*86400; $n<7; $n++,$t+=86400)
				$day_names[$n] = ucfirst(gmstrftime('%A',$t)); 

			if (date('F', $this->start_date) != date('F', $this->end_date)) {
				$title  = htmlentities(ucfirst(date('F', $this->start_date))).' - '.htmlentities(ucfirst(date('F', $this->end_date))).'&nbsp;'.$year; 
			} else {
				$title  = htmlentities(ucfirst(date('F', $this->start_date))).'&nbsp;'.$year; 
			}
		
			$first_of_month = gmmktime(0,0,0,$month,1,$year);

			list($month1, $year1, $month_name1, $weekday) = explode(',',gmstrftime('%m,%Y,%B,%w',$first_of_month));
			$weekday = ($weekday + 7) % 7;
		
			$last_month = $month-1;
			$last_year = $year;
			if ($last_month == 0) {
				$last_year = $year-1;
				$last_month = 12;
			}
			$next_month = $month+1;
			$next_year = $year;
			if ($next_month == 13) {
				$next_year = $year+1;
				$next_month = 1;
			}
			
			$url = '';
			$normal_url = '';
			$tag = '';
			$print_url = '';
			$display_toogle = '';
			$view_toogle = '';
			if (isset($_GET['view'])) {
				$url .= '&amp;view=print';
				$print_url .= '&amp;view=print';
				$display_toogle .= '&amp;view=print';
			}
		
			if (isset($_GET['tagid'])) {
				$url .= '&amp;tagid='.$_GET['tagid'];
				$normal_url .= '&amp;tagid='.$_GET['tagid'];
				$tag = '&amp;tagid='.$_GET['tagid'];
				$print_url .= '&amp;tagid='.$_GET['tagid'];
				$display_toogle .= '&amp;tagid='.$_GET['tagid'];
				$display_toogle .= '&amp;tagid='.$_GET['tagid'];
			}
			
			if (isset($_GET['date'])) {
				$print_url .= '&amp;date='.$_GET['date'];
			}
		
			if (isset($_GET['display'])) {
				$print_url .= '&amp;display='.$_GET['display'];
				$url .= '&amp;display='.$_GET['display'];
				$normal_url .= '&amp;display='.$_GET['display'];
			}
				
			$p = '<span class="large_calendar_prev"><a href="'.$this->current_page().'date='.$last_year.'/'.$last_month.$url.'"><<</a></span>';
			$n = '<span class="large_calendar_next"><a href="'.$this->current_page().'date='.$next_year.'/'.$next_month.$url.'">>></a></span>';
			echo '<div class="large_calendar_month">';
			if ($this->admin_options['display_view_toggle'] == '1') {
				echo '<a href="'.$this->current_page().'date='.$year.'/'.$week.$display_toogle.'&amp;display=week" class="display_toggle">'.__('Weekly View', 'cgm_event_calendar').'</a>';
			}
			echo $p.'<span class="large_calender_title"><a href="'.$this->current_page().'date='.$year.'/'.$month.$url.'">'.$title.'</a></span>'.$n;
			if ($this->admin_options['display_print_toggle'] == '1') {
				if (isset($_GET['view'])) {
					echo '<a href="'.$this->current_page().'date='.$year.'/'.$month.$normal_url.'" class="print_view">'.__('Normal View', 'cgm_event_calendar').'</a>';
				} else {
					echo '<a href="'.$this->current_page().'view=print'.$print_url.'" class="print_view">'.__('Print View', 'cgm_event_calendar').'</a>';
				}
			}
			echo '</div>'."\n".'<table class="large_calendar" cellpadding="0" cellspacing="0">'."\n\n<tr>";
		
			if ($day_name_length) {
				foreach ($day_names as $d)
					echo '<th abbr="'.htmlentities($d).'">'.htmlentities($day_name_length < 4 ? substr($d,0,$day_name_length) : $d).'</th>';
				echo "</tr>\n<tr>";
			}
		
			$entries = $this->get_entry_details(array($tag_id));
		
			$days = array();
			foreach ($entries as $entry) {
				// FIND THE NUMBER OF DAYS BETWEEN THE START AND END DATES
				$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
				for ($i = 0; $i <= $days_difference; $i++) {
					if ($month == date('n', ($entry['start_date_time']+(60*60*24*$i))) || $end_month == date('n', ($entry['start_date_time']+(60*60*24*$i)))) {
						$days[date('j', ($entry['start_date_time']+(60*60*24*$i)))][] = $entry;
					}
				}
			}
		
			reset($entries);
			$display_month = $month-1;
			$display_year = $year;
			if ($month == 1) {
				$display_month = 12;
				$display_year = $year - 1;
			}
		
			for ($i=$weekday; $i >= 1; $i--) {
				echo '<td class="blank_cell" id="d-'.$display_month .'-'.(date('t', mktime(0,0,0,$month-1,1,$year))-$i+1).'-'.$year.'"><p class="large_cal_day"><a href="'.$this->current_page().'date='.$display_year.'/'.$display_month. '/'.(date('t', mktime(0,0,0,$month-1,1,$year))-$i+1).'">'.(date('t', mktime(0,0,0,$month-1,1,$year))-$i+1).'</a></p></td>';
			}
				
			$display_order = array();
			$order_array = array();
		
			$days_in_month=gmdate('t',$first_of_month);
		
			$day=date('j',$this->start_date);
			while (mktime(0,0,0,$month, $day, $year) <= $this->end_date) {
			
				if (date('w', mktime(0,0,0,$month, $day, $year)) == 0 && $day != date('d',$this->start_date)) {
					echo "</tr>\n<tr>";
					$weekday = 0;
				}
			
				$found = false;
				$i = $entries[0]['start_date_time'];
			
				if (array_key_exists($day, $days)) {
					echo '<td class="large_entries_cell';
					if ($month.'/'.$day.'/'.$year == date('n/j/Y', time())) {
						echo ' calendar_today';
					}
					echo '" id="d-'.$month.'-'.$day.'-'.$year.'">'."\n";
					echo '<div class="large_cal_day"><a href="'.$this->current_page().'date='.date('Y/n/d', mktime(0,0,0,$month, $day, $year)).'&amp;display='.$view.'">'.date('j', mktime(0,0,0,$month, $day, $year)).'</a></div>'."\n";
					$entry_order = 0;
					$the_entries = array();
					foreach ($days[$day] as $entry) {

						$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
					
						$entry_output = '<a rel="entry_'.$entry['entry_id'].'_'.$day.'" href="'.$this->current_page().'entry='.$entry['entry_id'].'&amp;display='.$view.'"';
						if ($days_difference > 0) {
											        
							if (date('j', $entry['start_date_time']) == $day) {
								$entry_output .= ' class="multiple_days_start';
								$entry_output .= ' span_';
								if ( (date('j', mktime(0,0,0,$month,$day,$year)) + $days_difference) > date('t', mktime(0,0,0,$month,$day,$year)) ) {
									$entry_output .= date('t', mktime(0,0,0,$month,$day,$year)) - date('j', mktime(0,0,0,$month,$day,$year)) + 1;
								} else if ((7-date('w', mktime(0,0,0,$month,$day,$year))) > ($days_difference+1)) {
									$entry_output .= ($days_difference+1);
								} else {
									$entry_output .= (7-date('w', mktime(0,0,0,$month,$day,$year)));
								}
								$entry_output .= '"';
							} else if (date('j', $entry['end_date_time']) == $day) {
								$entry_output .= ' class="multiple_days_end"';
							} else {
								$entry_output .= ' class="multiple_days_middle';
								if (date('w', mktime(0,0,0,$month, $day, $year)) == 0) {
									$days_in = $this->days_difference($entry['start_date_time'], $this->dbtime(0,0,0,$month, $day, $year));							
									$entry_output .= ' span_';
									if ( (date('j', mktime(0,0,0,$month,$day,$year)) + ($days_difference-$days_in)) > date('t', mktime(0,0,0,$month,$day,$year)) ) {
										$entry_output .= date('t', mktime(0,0,0,$month,$day,$year)) - date('j', mktime(0,0,0,$month,$day,$year)) + 1;
									} else if ((7-date('w', mktime(0,0,0,$month,$day,$year))) > (($days_difference-$days_in)+1)) {
										$entry_output .= ($days_difference-$days_in+1);
									} else {
										$entry_output .= (7-date('w', mktime(0,0,0,$month,$day,$year)));
									}
								}
								$entry_output .= '"';
							}
						}
					
						$title = '';
						//if (date('j', $entry['start_date_time']) == $day || date('w', mktime(0,0,0,$month, $day, $year)) == 0 || $day == 1) {
							if (date('G', $entry['start_date_time']) == 0 && date('i', $entry['start_date_time']) == '00' && date('G', $entry['end_date_time']) == 23 && date('i', $entry['end_date_time']) == '45') {
								$title .= 'All Day ';
							} else {
								$title .= $entry['start_time'].' ';
							}
							$title .= $entry['title'].'';
						//}
						$entry_output .=  ' title="'.$title.'">';
					
					
						$tags = $this->get_entry_tags($entry['entry_id']);
						$event_tags = array();
					
						foreach ($tags as $tag) {
							$event_tags[] = $tag['tag_id'];
							if (!isset($_GET['view'])) {
								$entry_output .= '<span class="entry_tag tag_color_'.$tag['tag_id'].'" style="background: #'.$tag['tag_color'].';"></span>';
							}
						}
				
						$entry_output .= '<span class="';
						if ($this->admin_options['cgm_ec_hightlight_category'] && in_array($this->admin_options['cgm_ec_hightlight_category'], $event_tags)) {
							$entry_output .= 'entry_title_special';
						} else {
							$entry_output .= 'entry_title';
						}
						$entry_output .= '">'.$title.'</span></a>'."\n";
						
						if (($entry['description'] != '' || $entry['location'] != '' || $entry['instructor'] != '' || $entry['level'] != '') && !isset($_GET['view'])) {
							$entry_output .= '<div class="calendar_entry_hover" id="entry_'.$entry['entry_id'].'_'.$day.'">';
						
							if ($entry['description'] != '') {
								$entry_output .= $this->cgm_cal_the_content($entry['description']);
							}
						
							if (isset($entry['location']) && $entry['location'] != '') {
								$entry_output .=  '<p><strong>'.__('Location', 'cgm_event_calendar').'</strong><br />';
								$entry_output .=  $entry['location'].'</p>';
							}
		
							if (isset($entry['instructor']) && $entry['instructor'] != '') {
								$entry_output .=  '<p><strong>'.__('Instructor', 'cgm_event_calendar').'</strong><br />';
								$entry_output .=  $entry['instructor'].'</p>';
							}
						
							if (isset($entry['level']) && $entry['level'] != '') {
								$entry_output .=  '<p><strong>'.__('Level', 'cgm_event_calendar').'</strong><br />';
								$entry_output .=  $entry['level'].'</p>';
							}
							$entry_output .= '</div>';
						}
					
						if (!array_key_exists($entry['entry_id'].' '.$entry['start_date_time'], $order_array)) {
							while (isset($the_entries[$entry_order])) {
								$entry_order++;
							}
							$order_array[$entry['entry_id'].' '.$entry['start_date_time']] = $entry_order;
							$the_entries[$entry_order] = $entry_output;
							$entry_order++;
						} else {
							$the_entries[$order_array[$entry['entry_id'].' '.$entry['start_date_time']]] = $entry_output;
						}
					}
				
					ksort($the_entries);
				
					$last_key = 0;
					foreach ($the_entries as $key => $entry) {
						for ($i=$last_key;$i<$key; $i++) {
							echo '<div class="blank_space"></div>'."\n";
						}
						$last_key = $key+1;
						echo '<div class="large_entry">'.$entry.'</div>'."\n";
					}
					echo '</td>'."\n";
				} else {
					echo '<td';
					if ($month.'/'.$day.'/'.$year == date('n/j/Y', mktime())) {
						echo ' class="calendar_today"';
					}
					echo ' id="d-'.$month.'-'.$day.'-'.$year.'"><p class="large_cal_day"><a href="'.$this->current_page().'date='.date('Y/n/d', mktime(0,0,0,$month, $day, $year)).'">'.date('j', mktime(0,0,0,$month, $day, $year)).'</a></p></td>'."\n";
				}
				$day++;
				$weekday++;
				if ($day > date('t', mktime(0,0,0,$month, ($day-1), $year))) {
					$day = 1;
					$month++;				
				}
			}
		
			$display_month = $month+1;
			$display_year = $year;
			if ($month == 12) {
				$display_month = 1;
				$display_year = $year +1;
			}

			for ($i=1; $i <= (7-$weekday); $i++) {
				echo '<td class="blank_cell" id="d-'.($month+1).'-'.$i.'-'.$year.'"><p class="large_cal_day"><a href="'.$this->current_page().'date='.$display_year.'/'.$display_month.'/'.$i.'">'.$i.'</a></p></td>';
			}

			echo "</tr>\n</table>\n";

			$display_return = ob_get_clean();
			return $display_return;
		}
	
	
		/*
		RETURN HTML FOR A LARGE CALENDAR
		Input: date and tag id to only show specific entries
		Output: HTML for large calendar
		*/	
		function print_weekly_calendar($date, $tag_id = '') {
			if ( current_user_can('manage_options') ) { 
				echo 1;				
			}
			$view = 'week';
				
			$month = date('n', $this->start_date);
			$end_month = date('n', $this->end_date);
			$week = date('W', $this->start_date+(60*60*48));
			if (date('N', $this->start_date) == 7) {
				$clean['week']++;
			}
			$year = date('Y', $this->start_date);

			$day_names = array();
			for($n=0,$t=(3)*86400; $n<7; $n++,$t+=86400)
				$day_names[$n] = ucfirst(gmstrftime('%A',$t)); 

			if (date('F', $this->start_date) != date('F', $this->end_date)) {
				$title  = htmlentities(ucfirst(date('F', $this->start_date))).' - '.htmlentities(ucfirst(date('F', $this->end_date))).'&nbsp;'.$year; 
			} else {
				$title  = htmlentities(ucfirst(date('F', $this->start_date))).'&nbsp;'.$year; 
			}
		
			$first_of_month = gmmktime(0,0,0,$month,1,$year);

			list($month1, $year1, $month_name1, $weekday) = explode(',',gmstrftime('%m,%Y,%B,%w',$first_of_month));
			$weekday = ($weekday + 7) % 7;
		
			$last_month = $month-1;
			$last_year = $year;
			if ($last_month == 0) {
				$last_year = $year-1;
				$last_month = 12;
			}
			$next_month = $month+1;
			$next_year = $year;
			if ($next_month == 13) {
				$next_year = $year+1;
				$next_month = 1;
			}

		
			$last_week = $week-1;
			$last_year = $year;
			if ($last_week == 0) {
				$last_year = $year-1;
				$last_week = date('W', mktime(0,0,0,12,31,$last_year));
			}
		
			$total_weeks = date('W', mktime(0,0,0,12,31,$year));
			
			$next_week = $week+1;
			$next_year = $year;
			if ($week >= $total_weeks) {
				$next_year = $year+1;
				$next_week = 1;
			}
		
			$url = '';
			$normal_url = '';
			$tag = '';
			$print_url = '';
			$display_toogle = '';
			$view_toogle = '';
			if (isset($_GET['view'])) {
				$url .= '&amp;view=print';
				$print_url .= '&amp;view=print';
				$display_toogle .= '&amp;view=print';
			}
		
			if (isset($_GET['tagid'])) {
				$url .= '&amp;tagid='.$_GET['tagid'];
				$normal_url .= '&amp;tagid='.$_GET['tagid'];
				$tag = '&amp;tagid='.$_GET['tagid'];
				$print_url .= '&amp;tagid='.$_GET['tagid'];
				$display_toogle .= '&amp;tagid='.$_GET['tagid'];
				$display_toogle .= '&amp;tagid='.$_GET['tagid'];
			}
			
			if (isset($_GET['date'])) {
				$print_url .= '&amp;date='.$_GET['date'];
			}
		
			if (isset($_GET['display'])) {
				$print_url .= '&amp;display='.$_GET['display'];
				$url .= '&amp;display='.$_GET['display'];
				$normal_url .= '&amp;display='.$_GET['display'];
			}
				
		
			$p = '<span class="large_calendar_prev"><a href="'.$this->current_page().'date='.$last_year.'/'.$last_week.$url.'"><<</a></span>';
			$n = '<span class="large_calendar_next"><a href="'.$this->current_page().'date='.$next_year.'/'.$next_week.$url.'">>></a></span>';
			$calendar = '<div class="large_calendar_month">';
			if ($this->admin_options['display_view_toggle'] == '1') {
				$calendar .= '<a href="'.$this->current_page().'date='.$year.'/'.$month.$display_toogle.'&amp;display=month" class="display_toggle">'.__('Monthly View', 'cgm_event_calendar').'</a>';
			}
			$calendar .= $p.'<span class="large_calender_title"><a href="'.$this->current_page().'date='.$year.'/'.$week.$url.'">'.$title.'</a></span>'.$n;
			if ($this->admin_options['display_print_toggle'] == '1') {
				if (isset($_GET['view'])) {
					$calendar .= '<a href="'.$this->current_page().'date='.$year.'/'.$week.$normal_url.'" class="print_view">'.__('Normal View', 'cgm_event_calendar').'</a>';
				} else {
					$calendar .= '<a href="'.$this->current_page().'view=print'.$print_url.'" class="print_view">'.__('Print View', 'cgm_event_calendar').'</a>';
				}
			}
			$calendar .= '</div>'."\n";
		
			$calendar .= '<table class="weekly_large_calendar" cellpadding="0" cellspacing="0">'."\n\n<tr>";

		
			$calendar .= '<th class="hour_column"></th>';
			$day=date('j',$this->start_date);
			foreach ($day_names as $d) {
				$calendar .= '<th abbr="'.htmlentities($d).'"><a href="'.$this->current_page().'date='.date('Y/n/d', mktime(0,0,0,$month, $day, $year)).'&amp;display='.$view.'">'.htmlentities($d).'<br />'.date('M jS',  mktime(0,0,0,$month, $day, $year)).'</a></th>';
				$day++;
			}
			$calendar .= "</tr>\n<tr>";

			$entries = $this->get_entry_details(array($tag_id));
		
			$days = array();
			foreach ($entries as $entry) {
				// FIND THE NUMBER OF DAYS BETWEEN THE START AND END DATES
				$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
				for ($i = 0; $i <= $days_difference; $i++) {
					if ($month == date('n', ($entry['start_date_time']+(60*60*24*$i))) || $end_month == date('n', ($entry['start_date_time']+(60*60*24*$i)))) {
						$days[date('j', ($entry['start_date_time']+(60*60*24*$i)))][date('G', ($entry['start_date_time']+(60*60*24*$i)))][] = $entry;
					}
				}
			}
		
			asort($days);
		
			reset($entries);
			$display_month = $month-1;
			$display_year = $year;
			if ($month == 1) {
				$display_month = 12;
				$display_year = $year - 1;
			}

			$display_order = array();
			$order_array = array();
		
			$days_in_month=gmdate('t',$first_of_month);
		
		
			for ($time = $this->admin_options['cgm_ec_start_time']; $time <= $this->admin_options['cgm_ec_end_time']; $time++) {
				if ($time != $this->admin_options['cgm_ec_start_time']) {
					$calendar .= "</tr>\n<tr>";
				}
			
				$calendar .= '<td class="event_start_time" valign="top">'.date('g:i a', $this->dbtime($time, 0, 0, $month, $day, $year)).'</td>';
			
				$day=date('j',$this->start_date);
				$month=date('m',$this->start_date);
				while (mktime(0,0,0,$month, $day, $year) <= $this->end_date) {
			
					$found = false;
					$i = $entries[0]['start_date_time'];
			
					if (isset($days[$day][$time])) {
						$calendar .= '<td class="large_entries_cell';
						if ($month.'/'.$day.'/'.$year == date('n/j/Y', time())) {
							$calendar .= ' calendar_today';
						}
						$calendar .= '" id="d-'.$month.'-'.$day.'-'.$year.'-'.$time.'" valign="top">'."\n";
						$entry_order = 0;
						$the_entries = array();
						foreach ($days[$day][$time] as $entry) {

							$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
					
							$entry_output = '<a rel="entry_'.$entry['entry_id'].'_'.$day.'" href="'.$this->current_page().'entry='.$entry['entry_id'].'&amp;display='.$view.'"';
							if ($days_difference > 0) {
												
								if (date('j', $entry['start_date_time']) == $day) {
									$entry_output .= ' class="multiple_days_start';
									$entry_output .= ' span_';
									if ( (date('j', mktime(0,0,0,$month,$day,$year)) + $days_difference) > date('t', mktime(0,0,0,$month,$day,$year)) ) {
										$entry_output .= date('t', mktime(0,0,0,$month,$day,$year)) - date('j', mktime(0,0,0,$month,$day,$year)) + 1;
									} else if ((7-date('w', mktime(0,0,0,$month,$day,$year))) > ($days_difference+1)) {
										$entry_output .= ($days_difference+1);
									} else {
										$entry_output .= (7-date('w', mktime(0,0,0,$month,$day,$year)));
									}
									$entry_output .= '"';
								} else if (date('j', $entry['end_date_time']) == $day) {
									$entry_output .= ' class="multiple_days_end"';
								} else {
									$entry_output .= ' class="multiple_days_middle';
									if (date('w', mktime(0,0,0,$month, $day, $year)) == 0) {
										$days_in = $this->days_difference($entry['start_date_time'], mktime(0,0,0,$month, $day, $year));							
										$entry_output .= ' span_';
										if ( (date('j', mktime(0,0,0,$month,$day,$year)) + ($days_difference-$days_in)) > date('t', mktime(0,0,0,$month,$day,$year)) ) {
											$entry_output .= date('t', mktime(0,0,0,$month,$day,$year)) - date('j', mktime(0,0,0,$month,$day,$year)) + 1;
										} else if ((7-date('w', mktime(0,0,0,$month,$day,$year))) > (($days_difference-$days_in)+1)) {
											$entry_output .= ($days_difference-$days_in+1);
										} else {
											$entry_output .= (7-date('w', mktime(0,0,0,$month,$day,$year)));
										}
									}
									$entry_output .= '"';
								}
							}
					
							$title = '';
							//if (date('j', $entry['start_date_time']) == $day || date('w', mktime(0,0,0,$month, $day, $year)) == 0 || $day == 1) {
								if (date('G', $entry['start_date_time']) == 0 && date('i', $entry['start_date_time']) == '00' && date('G', $entry['end_date_time']) == 23 && date('i', $entry['end_date_time']) == '45') {
									$title .= 'All Day ';
								} else {
									$title .= $entry['start_time'].' ';
								}
								$title .= $entry['title'].'';
							//}
							$entry_output .=  ' title="'.$title.'">';
					
						
							$tags = $this->get_entry_tags($entry['entry_id']);
							$event_tags = array();
						
							foreach ($tags as $tag) {
								$event_tags[] = $tag['tag_id'];
								if (!isset($_GET['view'])) {
									$entry_output .= '<span class="entry_tag tag_color_'.$tag['tag_id'].'" style="background: #'.$tag['tag_color'].';"></span>';
								}
							}
					
							$entry_output .= '<span class="';
							if (in_array(get_option('cgm_ec_hightlight_category'), $event_tags)) {
								$entry_output .= 'entry_title_special';
							} else {
								$entry_output .= 'entry_title';
							}
							$entry_output .= '">'.$title.'</span></a>'."\n";
					
							if (($entry['description'] != '' || $entry['location'] != '' || $entry['instructor'] != '' || $entry['level'] != '') && !isset($_GET['view'])) {
								$entry_output .= '<div class="calendar_entry_hover" id="entry_'.$entry['entry_id'].'_'.$day.'">';
						
								if ($entry['description'] != '') {
									$entry_output .= $this->cgm_cal_the_content($entry['description']);
								}
						
								if (isset($entry['location']) && $entry['location'] != '') {
									$entry_output .=  '<p><strong>'.__('Location', 'cgm_event_calendar').'</strong><br />';
									$entry_output .=  $entry['location'].'</p>';
								}
		
								if (isset($entry['instructor']) && $entry['instructor'] != '') {
									$entry_output .=  '<p><strong>'.__('Instructor', 'cgm_event_calendar').'</strong><br />';
									$entry_output .=  $entry['instructor'].'</p>';
								}
						
								if (isset($entry['level']) && $entry['level'] != '') {
									$entry_output .=  '<p><strong>'.__('Level', 'cgm_event_calendar').'</strong><br />';
									$entry_output .=  $entry['level'].'</p>';
								}
								$entry_output .= '</div>';
							}
					
							if (!array_key_exists($entry['entry_id'].' '.$entry['start_date_time'], $order_array)) {
								while (isset($the_entries[$entry_order])) {
									$entry_order++;
								}
								$order_array[$entry['entry_id'].' '.$entry['start_date_time']] = $entry_order;
								$the_entries[$entry_order] = $entry_output;
								$entry_order++;
							} else {
								$the_entries[$order_array[$entry['entry_id'].' '.$entry['start_date_time']]] = $entry_output;
							}
						}
				
						ksort($the_entries);
				
						$last_key = 0;
						foreach ($the_entries as $key => $entry) {
							for ($i=$last_key;$i<$key; $i++) {
								$calendar .= '<div class="blank_space"></div>'."\n";
							}
							$last_key = $key+1;
							$calendar .= '<div class="large_entry">'.$entry.'</div>'."\n";
						}
						$calendar .= '</td>'."\n";
					} else {
						$calendar .= '<td';
						if ($month.'/'.$day.'/'.$year == date('n/j/Y', mktime())) {
							$calendar .= ' class="calendar_today"';
						}
						$calendar .= ' id="d-'.$month.'-'.$day.'-'.$year.'-'.$time.'"></td>'."\n";
					}
					$day++;
					$weekday++;
					if ($day > date('t', mktime(0,0,0,$month, ($day-1), $year))) {
						$day = 1;
						$month++;				
					}
				}
		
			}
		
			$display_month = $month+1;
			$display_year = $year;
			if ($month == 12) {
				$display_month = 1;
				$display_year = $year +1;
			}

			$calendar .= "</tr>\n</table>\n";
		
		
			return $calendar;
		}

		/*
		RETURN A LIST OF THE DAYS ENTRIES
		Input: tag id to only show specific entries
		Output: HTML for list of entries
		*/
		function get_entries_list($date, $tag_id = '') {
			$day = date('j', $date);
			$month = date('n', $date);
			$year = date('Y', $date);
			$this->start_date = mktime(0,0,0,$month, $day, $year);
			$this->end_date = mktime(23,59,59, $month, $day, $year);
		
			$entries = $this->get_entry_details($tag_id);
			$list = '<ul class="entries_list">';
			foreach ($entries as $entry) {
				$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);
				$list .= '<li><a href="'.$this->current_page().'entry='.$entry['entry_id'].'&display='.$this->display.'"><span class="left">';
			
				if ($days_difference > 0) {
					$list .= date('m/d', $entry['start_date_time']).' '.$entry['start_time'];
				} else {
					$list .= $entry['start_time'].' ';
				}
				
				if ($days_difference > 0) {
					$list .= ' - '.date('m/d', $entry['end_date_time']).' '.$entry['start_time'].'</span><span class="right">'.$entry['title'].'</span></a></li>';
				} else {
					$list .= ' - '.$entry['end_time'].'</span><span class="right">'.$entry['title'].'</span></a></li>';
				}
			}
			$list .= '</ul>';
			return $list;
		}

		function parse_list_item($item) {
			// REPLACE BLOCK LINK
			$pos_start = strpos($item, '[link]');
			$pos_end = strpos($item, '[/link]', $pos_start);
			while ($pos_start !== false && $pos_end !== false && $pos_start < $pos_end) {
				$length = $pos_end - $pos_start;
				$post1 = substr($item, 0, $pos_start);
				$post2 = substr($item, $pos_start+$length+7);
				$link = substr($item, $pos_start+6, $length-6);
				
				if (($pos = strpos($this->admin_options['calendar_url'], '?')) !== false) {
					$item = $post1.'<a href="'.$this->admin_options['calendar_url'].'&entry='.$this->temp_id.'">'.$link.'</a>'.$post2;
				} else {
					$item = $post1.'<a href="'.$this->admin_options['calendar_url'].'?entry='.$this->temp_id.'">'.$link.'</a>'.$post2;
				}
				
				// CHECK FOR MORE LINKS IN ITEM							
				$pos_start = strpos($item, '[link]');
				$pos_end = strpos($item, '[/link]', $pos_start);
			}
			
			// REPLACE DATE
			$pos_start = strpos($item, '[date');
			$pos_end = strpos($item, ']', $pos_start);
			while ($pos_start !== false && $pos_end !== false && $pos_start < $pos_end) {
				$length = $pos_end - $pos_start;
				$post1 = substr($item, 0, $pos_start);
				$post2 = substr($item, $pos_end+1);
				$date = substr($item, $pos_start+5, $length-5);
				if (strpos($date, "=") === false) {
					$item = $post1.'<span class="error">['.__('invalid date format', 'cgm_event_calendar').']</span]</span> '.$post2;
				} else {
					$date = trim($date, '=');
					$item = $post1.date($date, $this->temp_start).$post2;
				}
				// CHECK FOR MORE LINKS IN ITEM							
				$pos_start = strpos($item, '[date');
				$pos_end = strpos($item, ']', $pos_start);
			}
			
			// REPLACE DATE
			$pos_start = strpos($item, '[enddate');
			$pos_end = strpos($item, ']', $pos_start);
			while ($pos_start !== false && $pos_end !== false && $pos_start < $pos_end) {
				$length = $pos_end - $pos_start;
				$post1 = substr($item, 0, $pos_start);
				$post2 = substr($item, $pos_end+1);
				$date = substr($item, $pos_start+8, $length-8);
				if (strpos($date, "=") === false) {
					$item = $post1.'<span class="error">['.__('invalid date format', 'cgm_event_calendar').']</span> '.$post2;
				} else {
					$date = trim($date, '=');
					$item = $post1.date($date, $this->temp_start).$post2;
				}
				// CHECK FOR MORE LINKS IN POST							
				$pos_start = strpos($item, '[enddate');
				$pos_end = strpos($item, ']', $pos_start);
			}
			
			$item = str_replace('[title]', $this->temp_title, $item);
			
			return $item;
			
		}

		/*
		RETURN A LIST OF THE DAYS ENTRIES
		Input: date and tag id to only show specific entries
		Output: HTML for list of entries
		*/
		function list_upcoming_events($atts = '') {		
			
			extract(shortcode_atts(array(
									"num_events"	=> 4,
									"tag_id"		=> ''
								), $atts));
			
			$this->start_date = $this->dbtime();
			$this->end_date = $this->dbtime(23,59,59,date('n')+1, date('j'), date('Y'));

			$tag_id = explode(',', $tag_id);
			$entries = $this->get_entry_details($tag_id);
			
			$entries = $this->multi_sort($entries, "start_date_time", false);
		
			$count = 0;
			$list = '';
			foreach ($entries as $entry) {
				if ($count == $num_events) {
					break;
				}
				$this->temp_id = $entry['entry_id'];
				$this->temp_start = $entry['start_date_time'];
				$this->temp_end = $entry['end_date_time'];
				$this->temp_title = $entry['title'];
				
				$days_difference = $this->days_difference($entry['start_date_time'], $entry['end_date_time']);

				$list .= $this->parse_list_item($this->admin_options['list_format']);
				$count++;
			}
			if ($count == 0) {
				$list = '<p>'.__('Sorry there are no upcoming events', 'cgm_event_calendar').'</p>';
			}
			return $list;
		}

	}
} //End Class DevloungePluginSeries

if (class_exists("CGMEventsCalendar")) {
	$cgm_calendar = new CGMEventsCalendar();
}

include('array_sorter.class.php');

//Initialize the admin panel
if (!function_exists("cgm_calendar_ap")) {
	function cgm_calendar_ap() {
		global $cgm_calendar;
		if (!isset($cgm_calendar)) {
			return;
		}
		add_options_page('CGM Calendar', 'CGM Calendar', 9, basename(__FILE__), array(&$cgm_calendar, 'print_settings_page'));
		
		add_object_page(__("Calendar", 'cgm_event_calendar'), __("Calendar", 'cgm_event_calendar'), 8, plugin_basename(__FILE__), array(&$cgm_calendar, 'display_entries'), plugins_url('images/icon.gif', __FILE__));
		add_submenu_page(__FILE__, __("Edit Events", 'cgm_event_calendar'), __("Edit", 'cgm_event_calendar'), "edit_posts", plugin_basename(__FILE__), array(&$cgm_calendar, 'display_entries'));
		add_submenu_page(__FILE__, __("Manage Event", 'cgm_event_calendar'), __("Add Event", 'cgm_event_calendar'), "edit_posts", 'cgm_calendar_edit', array(&$cgm_calendar, 'edit_entry'));
		add_submenu_page(__FILE__, __("Categories", 'cgm_event_calendar'), __("Categories", 'cgm_event_calendar'), "edit_posts", 'cgm_calendar_categories', array(&$cgm_calendar, 'display_categories'));
		add_submenu_page(__FILE__, __("Manage Category", 'cgm_event_calendar'), __("Add Category", 'cgm_event_calendar'), "edit_posts", 'cgm_calendar_category', array(&$cgm_calendar, 'edit_category'));
		
	}
}

if (!function_exists("cgm_event_calendar")) {
	function cgm_event_calendar() {
		global $cgm_calendar;
		echo $cgm_calendar->set_up_calendar();
	}
}

if (!function_exists("cgm_list_upcoming_events")) {
	function cgm_list_upcoming_events($atts) {
		global $cgm_calendar;
		echo $cgm_calendar->list_upcoming_events($atts);
	}
}

//Actions and Filters
if (isset($cgm_calendar)) {
	
	load_plugin_textdomain('cgm_event_calendar', plugins_url('languages/', __FILE__));
	
	register_activation_hook( plugin_basename(__FILE__), array(&$cgm_calendar, 'activate'));
	
	//Actions
	add_action('admin_menu', 'cgm_calendar_ap'); 
	
	add_action('template_redirect', array(&$cgm_calendar, 'intercept_page_template'));
	add_filter('the_posts',array(&$cgm_calendar,'intercept_page_call'));
	
	add_action('wp_head', array(&$cgm_calendar, 'add_header_code'), 1);
	
	//Filters
	if (isset($_GET['page']) && ($pos = strpos($_GET['page'], "cgm_calendar")) !== false) {
		add_action('admin_print_scripts', array(&$cgm_calendar, 'admin_js') );
		add_action('admin_print_styles', array(&$cgm_calendar, 'admin_css') );
		add_action('admin_head', array(&$cgm_calendar, 'admin_header'));
	}	
	
	add_filter('cgm_cal_the_content', 'wptexturize');
	add_filter('cgm_cal_the_content', 'convert_smilies');
	add_filter('cgm_cal_the_content', 'convert_chars');
	add_filter('cgm_cal_the_content', 'wpautop');
	add_filter('cgm_cal_the_content', 'prepend_attachment');
	
	add_shortcode("cgm-event-calendar", array(&$cgm_calendar, 'set_up_calendar'));
	add_shortcode("cgm-upcoming-events", array(&$cgm_calendar, 'list_upcoming_events'));
}
?>